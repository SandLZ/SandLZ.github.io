<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sandlz.me/"/>
  <updated>2017-03-27T14:43:18.000Z</updated>
  <id>http://sandlz.me/</id>
  
  <author>
    <name>sand</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ionic多视图</title>
    <link href="http://sandlz.me/2017/03/27/Ionic%E5%A4%9A%E8%A7%86%E5%9B%BE/"/>
    <id>http://sandlz.me/2017/03/27/Ionic多视图/</id>
    <published>2017-03-27T01:59:46.000Z</published>
    <updated>2017-03-27T14:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用场景：<br>    一个MainView容器中 包含多个子View, MainView中包含公共view,相对来说是全局的。<br>    如：一个自定义的侧边栏菜单,在每个页面都显示。</p><a id="more"></a><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p>angular-ui-router（ionic.bundle.js 已包含）</p><p><a href="https://ui-router.github.io/ng1/docs/0.3.1/index.html" target="_blank" rel="external">Api</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>需求：</p><ol><li>首页需要显示自定义侧边栏，要求一直显示，通过导航栏上的菜单按钮控制打开或关闭；</li><li>通过侧边栏菜单点击切换当前显示的View</li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>确定变与不变</li><li>不变的菜单栏放在哪？</li><li>变得放在哪？</li></ul><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol><li>View层级关系</li></ol><div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/pad_side.jpeg" width="600" height="433" alt="图片名称" align="center"><br></div><p>如上图所示，右侧边栏可通过导航栏右侧按钮打开和缩小(非关闭不显示);<br>容器位置则是变化的页面。</p><ol><li><p>路由设置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">   .state(&apos;login&apos;,&#123;</span><br><span class="line">     url: &apos;/login&apos;,</span><br><span class="line">     templateUrl: &apos;templates/login.html&apos;,</span><br><span class="line">     controller: &apos;UserCtrl&apos;</span><br><span class="line">   &#125;)</span><br><span class="line">   .state(&apos;main&apos;,&#123;</span><br><span class="line">     url: &apos;/main&apos;,</span><br><span class="line">     cache: true,</span><br><span class="line">     templateUrl: &apos;templates/main.html&apos;,</span><br><span class="line">     controller: &apos;MainCtrl&apos;</span><br><span class="line">   &#125;)</span><br><span class="line">   .state(&apos;main.news&apos;, &#123;</span><br><span class="line">     url: &apos;/news&apos;,</span><br><span class="line">     templateUrl: &apos;templates/news.html&apos;,</span><br><span class="line">     controller: &apos;NewsCtrl&apos;</span><br><span class="line">   &#125;)</span><br><span class="line">   .state(&apos;main.photo&apos;, &#123;</span><br><span class="line">     url: &apos;/photo&apos;,</span><br><span class="line">     templateUrl: &apos;templates/photo.html&apos;,</span><br><span class="line">     controller: &apos;PhotoCtrl&apos;</span><br><span class="line">   &#125;);</span><br><span class="line"> $urlRouterProvider.otherwise(&quot;/main&quot;);</span><br></pre></td></tr></table></figure><p> 路由规则：</p><ul><li>首先访问 main</li><li>main 下包含news,photo页面(可多个)</li></ul></li><li><p>加载内部页面</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ui-view&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/ligang2585116/article/details/50380343" target="_blank" rel="external">angular-ui-router 多视图views</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用场景：&lt;br&gt;    一个MainView容器中 包含多个子View, MainView中包含公共view,相对来说是全局的。&lt;br&gt;    如：一个自定义的侧边栏菜单,在每个页面都显示。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Ionic" scheme="http://sandlz.me/tags/Ionic/"/>
    
      <category term="ui-router" scheme="http://sandlz.me/tags/ui-router/"/>
    
  </entry>
  
  <entry>
    <title>MySQL恢复数据</title>
    <link href="http://sandlz.me/2017/02/08/MySQL%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/"/>
    <id>http://sandlz.me/2017/02/08/MySQL恢复数据/</id>
    <published>2017-02-08T05:18:06.000Z</published>
    <updated>2017-02-08T05:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>   前几天由于一些原因，导致本机MySQL挂了，一气之下打算重新安装，但是本地数据库里还存了一些比较重要的资料，就找到这个表所在的文件夹，保存了一份(还好保存了…)<br>   屋漏偏逢连夜雨，Apple ID密码忘了，恢复秘钥存在数据库里…这下完蛋了，修改密码必须要这个秘钥。<br>   于是这两天有空就搞这个东西,花了不少时间,在这记录一下！</p>   <a id="more"></a><h2 id="恢复数据的前提"><a href="#恢复数据的前提" class="headerlink" title="恢复数据的前提"></a>恢复数据的前提</h2><blockquote><p>必须满足以下几个条件：<br>frm 用于 恢复表结构<br>ibd 用于 恢复数据<br>表名 新建表</p></blockquote><ul><li>表结构</li><li>表名</li><li>frm(恢复表结构)</li><li>ibd(用于恢复数据)</li></ul><h2 id="恢复环境"><a href="#恢复环境" class="headerlink" title="恢复环境"></a>恢复环境</h2><ul><li>OSX 10.12.3</li><li>MySQL 5.7.17</li></ul><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>这里分为2种情况：<br>注意：表名一定要一致！！！</p><h3 id="有表结构"><a href="#有表结构" class="headerlink" title="有表结构"></a>有表结构</h3><ol><li>建立一个数据库 (mydb)</li><li>根据表结构建立表 (mytable)</li><li><p>执行下面语句，用于关闭 tableNameSpace</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE mydb.mytable DISCARD TABLESPACE;</span><br></pre></td></tr></table></figure></li><li><p>关闭数据库</p></li><li>拷贝要恢复的 ibd 文件 至 mydb 文件夹中</li><li>修改刚刚复制过去的ibd权限 (_mysql 可读写)</li><li>开启数据库</li><li><p>执行下面语句，用于打开 tableNameSpace</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE mydb.mytable IMPORT TABLESPACE;</span><br></pre></td></tr></table></figure></li><li><p>若出错，检查第8步</p></li><li>执行查询语句         – SUCCESS!</li></ol><h3 id="无表结构，有frm"><a href="#无表结构，有frm" class="headerlink" title="无表结构，有frm"></a>无表结构，有frm</h3><ol><li>建立一个数据库 (mydb)</li><li>根据表结构建立表 (mytable)</li><li>随意建几个字段（最好能记得有几个字段）</li><li>关闭数据库</li><li>替换 frm 文件 至 新建立的数据库文件夹 </li><li><p>修改 my.cnf(Mac:/etc Win: C:\Program Data) 添加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_force_recovery = 6</span><br></pre></td></tr></table></figure></li></ol><ol><li>开启数据库</li><li>提示：mytable 不存在 -&gt; 查看LOG 确定 字段个数，并修改表（改好后重复4-7操作）</li><li>获得表结构</li><li>参考 有表结构 操作</li></ol><p>【参考文献】</p><p><a href="http://dba.stackexchange.com/questions/57120/recover-mysql-database-from-data-folder-without-ibdata1-from-ibd-files/142836" target="_blank" rel="external">1. Recover MySQL database from data folder without ibdata1 from ibd files</a></p><p><a href="http://blog.csdn.net/hi__study/article/details/53489672" target="_blank" rel="external">2. 表结构</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   前几天由于一些原因，导致本机MySQL挂了，一气之下打算重新安装，但是本地数据库里还存了一些比较重要的资料，就找到这个表所在的文件夹，保存了一份(还好保存了…)&lt;br&gt;   屋漏偏逢连夜雨，Apple ID密码忘了，恢复秘钥存在数据库里…这下完蛋了，修改密码必须要这个秘钥。&lt;br&gt;   于是这两天有空就搞这个东西,花了不少时间,在这记录一下！&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="MySQL" scheme="http://sandlz.me/tags/MySQL/"/>
    
      <category term="恢复" scheme="http://sandlz.me/tags/%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>DBLite数据库</title>
    <link href="http://sandlz.me/2017/01/02/DBLite%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://sandlz.me/2017/01/02/DBLite数据库/</id>
    <published>2017-01-02T13:31:29.000Z</published>
    <updated>2017-03-24T14:05:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sqlite orm.<br>It’refer to swyouflf’s xutils, thank swyouflf’s offertory.</p><p>It’s an android sqlite orm framework, and help developers easy to operate database.</p><a id="more"></a><h2 id="ScreenShot"><a href="#ScreenShot" class="headerlink" title="ScreenShot"></a>ScreenShot</h2><div><br><img align="left" src="http://7xsap2.com1.z0.glb.clouddn.com/dblite_add.png" width="423" height="702"><br><img align="right" src="http://7xsap2.com1.z0.glb.clouddn.com/dblite_delete.png" width="423" height="702"><br></div><br><div><br><img align="left" src="http://7xsap2.com1.z0.glb.clouddn.com/dblite_update.png" width="423" height="702"><br><img align="right" src="http://7xsap2.com1.z0.glb.clouddn.com/dblite_query.png" width="423" height="702"><br></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;me.sandlz:dblite:1.0.2&apos;</span><br></pre></td></tr></table></figure><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>在自定义Application里调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 初始化数据库</span><br><span class="line">DbLite.init(this,false);</span><br></pre></td></tr></table></figure><h3 id="创建DBHelper类"><a href="#创建DBHelper类" class="headerlink" title="创建DBHelper类"></a>创建DBHelper类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取db的实例</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static DBHelper2 getInstance() &#123;</span><br><span class="line">    if(appContext==null)&#123;</span><br><span class="line">       throw new RuntimeException(&quot;请先在程序入口处初始化，调用init(ApplicationContext)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (instance == null) &#123;</span><br><span class="line">        instance = new DBHelper2();</span><br><span class="line">        File dbFile=new File(&quot;/sdcard/sandlz&quot;);</span><br><span class="line">        if(!dbFile.exists())&#123;</span><br><span class="line">            dbFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       DbManager.DaoConfig daoConfig = new DbManager.DaoConfig()</span><br><span class="line">                .setDbName(&quot;test.sqlite.db&quot;)</span><br><span class="line">                // 不设置dbDir时, 默认存储在app的私有目录.</span><br><span class="line">                .setDbDir(new File(&quot;/sdcard/sandlz&quot;))</span><br><span class="line">                .setDbVersion(1)</span><br><span class="line">                .setDbOpenListener(new DbManager.DbOpenListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onDbOpened(DbManager db) &#123;</span><br><span class="line">                        // 开启WAL, 对写入加速提升巨大</span><br><span class="line">                        db.getDatabase().enableWriteAheadLogging();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setDbUpgradeListener(new DbManager.DbUpgradeListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onUpgrade(DbManager db, int oldVersion, int newVersion) &#123;</span><br><span class="line">                        // TODO: 可执行一些操作 如删除、更新表等</span><br><span class="line">                        // db.addColumn(...);</span><br><span class="line">                        // db.dropTable(...);</span><br><span class="line">                        // ...</span><br><span class="line">                        // or</span><br><span class="line">                        // db.dropDb();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        try &#123;</span><br><span class="line">            instance.db = DbLite.getDb(daoConfig);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合适的地方调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// this这里是在Application</span><br><span class="line">DBHelper2.init(this);</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新增Dao操作类，对外提供增删改查方法，具体可根据需求修改，选择效率最高的方式(请在子线程调用dao方法，防止阻塞主线程，影响用户体验！！！)</p><p>最好设置主键，提高操作效率.</p><h3 id="新建实体类"><a href="#新建实体类" class="headerlink" title="新建实体类"></a>新建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"userId"</span> ,isId = <span class="keyword">true</span>, autoGen = <span class="keyword">false</span>)<span class="comment">// 数据库字段设置</span></span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"Id"</span>)<span class="comment">// Gson解析</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBHelper2.getInstance().getDb().saveOrUpdate(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == users) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBHelper2.getInstance().getDb().saveOrUpdate(users);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBHelper2.getInstance().getDb().delete(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == users) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBHelper2.getInstance().getDb().delete(users);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBHelper2.getInstance().getDb().delete(User.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBHelper2.getInstance().getDb().update(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == users) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBHelper2.getInstance().getDb().update(users);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryUser</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userId) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;User&gt; users = DBHelper2.getInstance().getDb()</span><br><span class="line">                    .selector(User.class)</span><br><span class="line">                    .where(<span class="string">"userId"</span>,<span class="string">"="</span>,userId)</span><br><span class="line">                    .findAll();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != users &amp;&amp; users.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                user = users.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            users = DBHelper2.getInstance().getDb().findAll(User.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sqlite orm.&lt;br&gt;It’refer to swyouflf’s xutils, thank swyouflf’s offertory.&lt;/p&gt;
&lt;p&gt;It’s an android sqlite orm framework, and help developers easy to operate database.&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Android" scheme="http://sandlz.me/tags/Android/"/>
    
      <category term="DB" scheme="http://sandlz.me/tags/DB/"/>
    
      <category term="ORM" scheme="http://sandlz.me/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView实战</title>
    <link href="http://sandlz.me/2016/11/22/RecyclerView%E5%AE%9E%E6%88%98/"/>
    <id>http://sandlz.me/2016/11/22/RecyclerView实战/</id>
    <published>2016-11-22T14:45:11.000Z</published>
    <updated>2017-03-25T10:09:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="external">BaseRecyclerViewAdapterHelper</a>是一个很强的RecyclerView适配器，针对以往大量的adapter代码做了大量优化.</p><p>收集部分优秀的RecyclerViewAdapter文章：</p><ul><li>腾讯Bugly <a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578065&amp;idx=2&amp;sn=25e64a8bb7b5934cf0ce2e49549a80d6&amp;chksm=84b3b156b3c43840061c28869671da915a25cf3be54891f040a3532e1bb17f9d32e244b79e3f&amp;scene=4#wechat_redirect" target="_blank" rel="external">ListView 与 RecyclerView 对比浅析</a></li><li>BRVAH <a href="https://github.com/CymChad/CymChad.github.io" target="_blank" rel="external">RecyclerView优秀文集</a></li></ul><a id="more"></a><h2 id="为什么使用RecyclerView"><a href="#为什么使用RecyclerView" class="headerlink" title="为什么使用RecyclerView?"></a>为什么使用RecyclerView?</h2><ul><li>支持多种布局</li><li>复杂数据、快速滑动</li><li>API友好</li></ul><h2 id="为什么使用它？"><a href="#为什么使用它？" class="headerlink" title="为什么使用它？"></a>为什么使用它？</h2><ul><li>优化Adapter代码（减少百分之70%代码）</li><li>添加点击item点击、长按事件、以及item子控件的点击事件</li><li>添加加载动画（一行代码轻松切换5种默认动画）</li><li>添加头部、尾部、下拉刷新、上拉加载（感觉又回到ListView时代）</li><li>设置自定义的加载更多布局</li><li>添加分组（随心定义分组头部）</li><li>自定义不同的item类型（简单配置、无需重写额外方法）</li><li>设置空布局（比Listview的setEmptyView还要好用！）</li><li>添加拖拽item</li></ul><p>(以上摘自BaseRecyclerViewAdapterHelper)</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="添加到工程"><a href="#添加到工程" class="headerlink" title="添加到工程"></a>添加到工程</h3><p>项目根目录build.gradle </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app目录下build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.github.CymChad:BaseRecyclerViewAdapterHelper:v2.6.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>项目地址：<a href="https://github.com/SandLZ/ChatUIDemo" target="_blank" rel="external">ChatUIDemo</a></p><p>下面展示一些示例：</p><ul><li>多布局聊天页</li><li>搜索高亮</li><li>下拉刷新、上拉加载更多 </li></ul><div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/chat.gif" width="399" height="633" alt="图片名称" align="left"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/pull_refresh.gif" width="633" height="399" alt="图片名称" align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/highLight.gif" width="399" height="633" alt="图片名称" align="right"><br></div><h3 id="示例-聊天页"><a href="#示例-聊天页" class="headerlink" title="示例-聊天页"></a>示例-聊天页</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><ul><li>appcompat-v7</li><li>recyclerview</li><li>xutils 工具合集</li><li>BaseRecyclerViewAdapterHelper 适配器</li><li>glide 图片框架</li><li>glide-transformations 变换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:appcompat-v7:23.3.0&apos;</span><br><span class="line">compile &apos;com.android.support:recyclerview-v7:23.3.0&apos;</span><br><span class="line">compile &apos;org.xutils:xutils:3.3.38&apos;</span><br><span class="line">compile &apos;com.github.CymChad:BaseRecyclerViewAdapterHelper:2.6.1&apos;</span><br><span class="line">compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;</span><br><span class="line">compile &apos;jp.wasabeef:glide-transformations:2.0.1&apos;</span><br></pre></td></tr></table></figure><h4 id="新建items"><a href="#新建items" class="headerlink" title="新建items"></a>新建items</h4><p>定义消息的类型，包含哪些内容(页面所需数据)</p><p>ChatMutiItems 继承自 MultiItemEntity<br>并实现 getItemType() 方法.</p><p>代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEXT = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEXT_O = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMAGE = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMAGE_O = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 公用</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userHeadUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span>   receiverTime;</span><br><span class="line">    <span class="comment">// 文本</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">// 图片</span></span><br><span class="line">    <span class="keyword">private</span> String imageUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> itemType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> spanSize;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="新建Adapter"><a href="#新建Adapter" class="headerlink" title="新建Adapter"></a>新建Adapter</h4><p>ChatAdapter 继承自 BaseMultiItemQuickAdapter</p><p>这里需传入items类和BaseViewHolder.</p><p>BaseViewHolder 是viewHolder基类，封装了一些常用方法，提高开发效率.</p><p>构造方法：<br>需 指定要展示哪些类型的布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChatAdapter</span><span class="params">(Context context, List&lt;ChatMutiItems&gt; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(data);</span><br><span class="line">    mContext = context;</span><br><span class="line">    <span class="comment">// 设定可能需要展示的ItemType</span></span><br><span class="line">    addItemType(ChatMutiItems.TEXT, R.layout.item_text_view);</span><br><span class="line">    addItemType(ChatMutiItems.TEXT_O, R.layout.item_text_view_o);</span><br><span class="line">    addItemType(ChatMutiItems.IMAGE, R.layout.item_img_view);</span><br><span class="line">    addItemType(ChatMutiItems.IMAGE_O, R.layout.item_img_view_o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Adapter具体用法下面将详细描述.</p><h4 id="RecyclerView绑定Adapter"><a href="#RecyclerView绑定Adapter" class="headerlink" title="RecyclerView绑定Adapter"></a>RecyclerView绑定Adapter</h4><ul><li>设定布局方式<br>流式布局（默认垂直滚动）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> GridLayoutManager manager = <span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">recyclerView.setLayoutManager(manager);</span><br></pre></td></tr></table></figure><ul><li>绑定Adapter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setAdapter(chatAdapter);</span><br></pre></td></tr></table></figure><h4 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h4><h5 id="convert-方法"><a href="#convert-方法" class="headerlink" title="convert()方法"></a>convert()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(BaseViewHolder holder, ChatMutiItems item)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>holder - 对应页面中的每个Item（相当于ListView中的ConvertView）<br>item   - 数据(相当于ListView中的data.get(i))</p><p>较ListViewAdapter优势：</p><ul><li>无需烦心view复用问题</li></ul><h5 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h5><p>可直接调用BaseViewHolder 提供的方法进行设置.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">holder.setText(R.id.item_text_username,item.getUserName());</span><br></pre></td></tr></table></figure><p>查看源码可知，BaseViewHolder帮我们做了转换与设置.</p><p>BaseViewHolder没有提供的方法怎么办？</p><p>通过holder.getView()方法绑定控件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ImageView) holder.getView(R.id.item_text_headurl)</span><br></pre></td></tr></table></figure><h5 id="点击事件与回调处理"><a href="#点击事件与回调处理" class="headerlink" title="点击事件与回调处理"></a>点击事件与回调处理</h5><p>Adapter作为View层，负责展示数据，不应该在此处理点击事件或其他业务操作逻辑，将复杂的逻辑放置Controller层或Manager层.</p><ul><li><p>点击事件</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加点击事件</span></span><br><span class="line">  holder.addOnClickListener(R.id.item_text_content);</span><br><span class="line">&lt;!--￼<span class="number">3</span>--&gt;</span><br><span class="line"></span><br><span class="line">recyclerView.addOnItemTouchListener(<span class="keyword">new</span> OnItemClickListener() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SimpleOnItemClick</span><span class="params">(BaseQuickAdapter baseQuickAdapter, View view, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">           Log.d(<span class="string">"zliu"</span>,<span class="string">"SimpleOnItemClick - "</span> + view.getId());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemChildClick</span><span class="params">(BaseQuickAdapter adapter, View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>.onItemChildClick(adapter, view, position);</span><br><span class="line">           Log.d(<span class="string">"zliu"</span>,<span class="string">"onItemChildClick- id - "</span>+view.getId());</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></li><li><p>特殊回调</p><p>  如文件下载进度，应通过局部刷新实现，在下载进度中刷新view.</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chatAdapter.notifyItemChanged(position);</span><br></pre></td></tr></table></figure></li></ul><h3 id="示例-高亮搜索"><a href="#示例-高亮搜索" class="headerlink" title="示例-高亮搜索"></a>示例-高亮搜索</h3><p>需求：模仿QQ搜索聊天记录<br>实现思路：</p><ol><li>高亮某关键字，即设置高亮色，通过SpannableStringBuilder完成</li><li>子线程循坏数据，拿到设置SpannableStringBuilder后的数据</li><li>更新页面</li></ol><p>部分代码：</p><ol><li><p>设置高亮字体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> SpannableStringBuilder <span class="title">getStyle</span><span class="params">(<span class="keyword">int</span> color,String content, String key)</span> </span>&#123;</span><br><span class="line">    SpannableStringBuilder style = <span class="keyword">new</span> SpannableStringBuilder(content);</span><br><span class="line">    <span class="keyword">int</span> fstart = content.indexOf(key);</span><br><span class="line">    <span class="keyword">int</span> fend   = fstart+key.length();</span><br><span class="line">    style.setSpan(<span class="keyword">new</span> ForegroundColorSpan(color),fstart,fend, Spannable.SPAN_EXCLUSIVE_INCLUSIVE);</span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>循环后台返回的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SearchMsgEntity&gt; <span class="title">getSearchReuslt</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    List&lt;SearchMsgEntity&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;SearchMsgEntity&gt; source = getFakeData();</span><br><span class="line">    <span class="keyword">for</span> (SearchMsgEntity s : source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.getName().contains(key)) &#123;</span><br><span class="line">            s.setNameStyle(getStyle(Color.BLUE,s.getName(),key));</span><br><span class="line">            results.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.getContent().contains(key)) &#123;</span><br><span class="line">            s.setContentStyle(getStyle(Color.BLUE,s.getContent(),key);                  results.add(s);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>页面更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (et_text.getText().toString().length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">// 提示框</span></span><br><span class="line">    btn_search.setText(<span class="string">"获取中..."</span>);</span><br><span class="line">    Log.d(<span class="string">"zliu"</span>,<span class="string">"开始计算时间：- "</span>+System.currentTimeMillis());</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟网络请求</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                     e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;SearchMsgEntity&gt; results = dataManager.getSearchReuslt(et_text.getText().toString());</span><br><span class="line">            Message message = <span class="keyword">new</span> Message();</span><br><span class="line">            message.obj = results;</span><br><span class="line">            mHandler.sendMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        btn_search.setText(<span class="string">"搜索"</span>);</span><br><span class="line">        adapter.setNewData((List&lt;SearchMsgEntity&gt;)msg.obj);</span><br><span class="line">        Log.d(<span class="string">"zliu"</span>,<span class="string">"设置完数据时间：- "</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>adapter 设置数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(BaseViewHolder holder, SearchMsgEntity item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == item.getNameStyle()) &#123;</span><br><span class="line">        holder.setText(R.id.search_name,item.getName());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        holder.setText(R.id.search_name,item.getNameStyle());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == item.getContentStyle()) &#123;</span><br><span class="line">        holder.setText(R.id.search_content,item.getContent());</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        holder.setText(R.id.search_content,item.getContentStyle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例-下拉刷新、加载更多"><a href="#示例-下拉刷新、加载更多" class="headerlink" title="示例-下拉刷新、加载更多"></a>示例-下拉刷新、加载更多</h3><p>由于BaseRecyclerViewAdapterHelper只提供了上拉加载更多(可自定义)，并且官方的下拉刷新自定义差，无法满足我们的需求，所以使用自定义的RecylcerView完成下拉刷新.</p><ol><li>自定义刷新布局</li><li>activity加载刷新布局</li><li>刷新逻辑控制</li></ol><p>代码很简单，参考PullRefreshLoadMoreActivity.</p><p>项目地址：<a href="https://github.com/SandLZ/ChatUIDemo" target="_blank" rel="external">ChatUIDemo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/CymChad/BaseRecyclerViewAdapterHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BaseRecyclerViewAdapterHelper&lt;/a&gt;是一个很强的RecyclerView适配器，针对以往大量的adapter代码做了大量优化.&lt;/p&gt;
&lt;p&gt;收集部分优秀的RecyclerViewAdapter文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;腾讯Bugly &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;amp;mid=2653578065&amp;amp;idx=2&amp;amp;sn=25e64a8bb7b5934cf0ce2e49549a80d6&amp;amp;chksm=84b3b156b3c43840061c28869671da915a25cf3be54891f040a3532e1bb17f9d32e244b79e3f&amp;amp;scene=4#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ListView 与 RecyclerView 对比浅析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BRVAH &lt;a href=&quot;https://github.com/CymChad/CymChad.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RecyclerView优秀文集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Android" scheme="http://sandlz.me/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://sandlz.me/tags/RecyclerView/"/>
    
      <category term="IM" scheme="http://sandlz.me/tags/IM/"/>
    
  </entry>
  
  <entry>
    <title>Android优秀开源项目及学习资料汇总</title>
    <link href="http://sandlz.me/2016/10/21/Android%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/"/>
    <id>http://sandlz.me/2016/10/21/Android优秀开源项目及学习资料汇总/</id>
    <published>2016-10-21T06:57:59.000Z</published>
    <updated>2016-10-24T03:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>更新时间：2016-10-21 15:01:30</p></blockquote><h2 id="Awesome"><a href="#Awesome" class="headerlink" title="Awesome"></a>Awesome</h2><p>包含平台、编程语言、前端、后端、大数据、理论、书籍、编辑器、开发环境、数据库、多媒体、学习、安全、娱乐、游戏等.<br><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome资源汇总</a></p><a id="more"></a><h2 id="优秀开源项目"><a href="#优秀开源项目" class="headerlink" title="优秀开源项目"></a>优秀开源项目</h2><h3 id="Awesome-Android"><a href="#Awesome-Android" class="headerlink" title="Awesome-Android"></a>Awesome-Android</h3><p>包含模拟器、资源库、资源、性能等.<br><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">Awesome-Android</a></p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><h3 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h3><p><a href="https://github.com/mcxiaoke/RxDocs" target="_blank" rel="external">RxJava文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;更新时间：2016-10-21 15:01:30&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Awesome&quot;&gt;&lt;a href=&quot;#Awesome&quot; class=&quot;headerlink&quot; title=&quot;Awesome&quot;&gt;&lt;/a&gt;Awesome&lt;/h2&gt;&lt;p&gt;包含平台、编程语言、前端、后端、大数据、理论、书籍、编辑器、开发环境、数据库、多媒体、学习、安全、娱乐、游戏等.&lt;br&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Awesome资源汇总&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Android" scheme="http://sandlz.me/tags/Android/"/>
    
      <category term="开源项目汇总" scheme="http://sandlz.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
    
      <category term="学习资料" scheme="http://sandlz.me/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Cordova-Plugin开发汇总</title>
    <link href="http://sandlz.me/2016/10/19/Cordova-Plugin%E5%BC%80%E5%8F%91%E6%B1%87%E6%80%BB/"/>
    <id>http://sandlz.me/2016/10/19/Cordova-Plugin开发汇总/</id>
    <published>2016-10-19T02:09:29.000Z</published>
    <updated>2016-10-24T03:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cordova-Plugin"><a href="#Cordova-Plugin" class="headerlink" title="Cordova-Plugin"></a>Cordova-Plugin</h2><p>官方插件检索：<a href="http://cordova.apache.org/plugins/" target="_blank" rel="external">cordova-plugin</a></p><h2 id="为什么开发插件？"><a href="#为什么开发插件？" class="headerlink" title="为什么开发插件？"></a>为什么开发插件？</h2><p>对于webApp来说，处理一些简单的页面是没有问题的，性能接近于原生；但对于复杂的功能，比如说流媒体播放、复杂的控件、数据库操作、文件操作等复杂的功能时，我们就需要调用原生的代码来完成.<br>Ionic-Framework为我们提供了插件的方式来实现JS调用原生代码.</p><h2 id="新建插件"><a href="#新建插件" class="headerlink" title="新建插件"></a>新建插件</h2><p>新建插件这里就不再叙述了，详细的可以参考我写的<a href="https://github.com/SandLZ/myFirstPlugin" target="_blank" rel="external">入门示例</a>,<br>包含了新建、安装、测试.</p><a id="more"></a><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><h3 id="Ios"><a href="#Ios" class="headerlink" title="Ios"></a>Ios</h3><h4 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h4><p>xxx.plist</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View controller-based status bar appearance NO</span><br></pre></td></tr></table></figure><p>conreoller</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 显示/隐藏StatusBar</span><br><span class="line">- (void)hideStatusBar&#123;</span><br><span class="line">    _isHideBar = YES;</span><br><span class="line">    [self setNeedsStatusBarAppearanceUpdate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)showStatusBar&#123;</span><br><span class="line">    _isHideBar = NO;</span><br><span class="line">    [self setNeedsStatusBarAppearanceUpdate];</span><br><span class="line">&#125;</span><br><span class="line">- (BOOL)prefersStatusBarHidden</span><br><span class="line">&#123;</span><br><span class="line">    return _isHideBar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="资源文件的使用"><a href="#资源文件的使用" class="headerlink" title="资源文件的使用"></a>资源文件的使用</h4><p>在对android插件开发时，我们不能像平时开发Android应用程序时直接使用 R.id.my_txt,那为什么不能这样用呢？</p><p>首先，R.java是我们android工程自动问我们生成的，里面包含drawable、layout、string、attr等，在我们添加资源文件或声明控件时，会自动为我们生成一个int值.</p><p>其次，我们编写插件时，是不会有这个R.java文件的，工程也不会为我们生成ID，只有当我们安装插件到项目工程时才会生成对应的id.</p><p>如何解决？</p><p>我们新建一个FakeR.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FakeR</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Context context;</span><br><span class="line"><span class="keyword">private</span> String packageName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FakeR</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">context = activity.getApplicationContext();</span><br><span class="line">packageName = context.getPackageName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FakeR</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.context = context;</span><br><span class="line">packageName = context.getPackageName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">(String group, String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> context.getResources().getIdentifier(key, group, packageName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">(Context context, String group, String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> context.getResources().getIdentifier(key, group, context.getPackageName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一眼就看明白了，这个类为我们提供了某资源对应的ID，只需传入id及对应的组别就行.</p><p>如:new FakeR().getId(“id”,”my_txt”)</p><p>遇到styleable时如何处理？</p><p>attrs.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"NumberPicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textSize"</span> <span class="attr">format</span>=<span class="string">"float|dimension"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"startNumber"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"endNumber"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"currentNumber"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"verticalSpacing"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"flagText"</span> <span class="attr">format</span>=<span class="string">"string|reference"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"flagTextSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"flagTextColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"backgroundColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"rowNumber"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java代码中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> attrId = context.getResources().getIdentifier(<span class="string">"textColor"</span>, <span class="string">"attr"</span>, context.getPackageName());</span><br><span class="line"><span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(attrs, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;attrId&#125;, defStyleAttr, <span class="number">0</span>);</span><br><span class="line">mTextColor = a.getColor(fakeR.getId(<span class="string">"styleable"</span>,<span class="string">"NumberPicker_textColor"</span>), DEFAULT_TEXT_COLOR);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cordova-Plugin&quot;&gt;&lt;a href=&quot;#Cordova-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Cordova-Plugin&quot;&gt;&lt;/a&gt;Cordova-Plugin&lt;/h2&gt;&lt;p&gt;官方插件检索：&lt;a href=&quot;http://cordova.apache.org/plugins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cordova-plugin&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么开发插件？&quot;&gt;&lt;a href=&quot;#为什么开发插件？&quot; class=&quot;headerlink&quot; title=&quot;为什么开发插件？&quot;&gt;&lt;/a&gt;为什么开发插件？&lt;/h2&gt;&lt;p&gt;对于webApp来说，处理一些简单的页面是没有问题的，性能接近于原生；但对于复杂的功能，比如说流媒体播放、复杂的控件、数据库操作、文件操作等复杂的功能时，我们就需要调用原生的代码来完成.&lt;br&gt;Ionic-Framework为我们提供了插件的方式来实现JS调用原生代码.&lt;/p&gt;
&lt;h2 id=&quot;新建插件&quot;&gt;&lt;a href=&quot;#新建插件&quot; class=&quot;headerlink&quot; title=&quot;新建插件&quot;&gt;&lt;/a&gt;新建插件&lt;/h2&gt;&lt;p&gt;新建插件这里就不再叙述了，详细的可以参考我写的&lt;a href=&quot;https://github.com/SandLZ/myFirstPlugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;入门示例&lt;/a&gt;,&lt;br&gt;包含了新建、安装、测试.&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Cordova" scheme="http://sandlz.me/tags/Cordova/"/>
    
      <category term="Plugin" scheme="http://sandlz.me/tags/Plugin/"/>
    
      <category term="Ionic" scheme="http://sandlz.me/tags/Ionic/"/>
    
      <category term="WebApp" scheme="http://sandlz.me/tags/WebApp/"/>
    
      <category term="插件" scheme="http://sandlz.me/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MVP + RxJava + Retrofit + Dagger2 FrameWork</title>
    <link href="http://sandlz.me/2016/09/28/MVP%20+%20RxJava%20+%20Retrofit%20+%20Dagger2%20FrameWork/"/>
    <id>http://sandlz.me/2016/09/28/MVP + RxJava + Retrofit + Dagger2 FrameWork/</id>
    <published>2016-09-28T08:20:43.000Z</published>
    <updated>2016-09-28T08:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dagger2"><a href="#Dagger2" class="headerlink" title="Dagger2"></a>Dagger2</h2><p>依赖注入(Dependency Injection)框架</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Dagger2&quot;&gt;&lt;a href=&quot;#Dagger2&quot; class=&quot;headerlink&quot; title=&quot;Dagger2&quot;&gt;&lt;/a&gt;Dagger2&lt;/h2&gt;&lt;p&gt;依赖注入(Dependency Injection)框架&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="MVP" scheme="http://sandlz.me/tags/MVP/"/>
    
      <category term="RxJava" scheme="http://sandlz.me/tags/RxJava/"/>
    
      <category term="Retrofit" scheme="http://sandlz.me/tags/Retrofit/"/>
    
      <category term="Dagger2" scheme="http://sandlz.me/tags/Dagger2/"/>
    
      <category term="FrameWork" scheme="http://sandlz.me/tags/FrameWork/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发基础</title>
    <link href="http://sandlz.me/2016/09/27/Android%20%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>http://sandlz.me/2016/09/27/Android 开发基础/</id>
    <published>2016-09-27T09:20:31.000Z</published>
    <updated>2017-03-25T10:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Environment: Mac + Android Studio(2.2) </p><h2 id="You-need-konw"><a href="#You-need-konw" class="headerlink" title="You need konw"></a>You need konw</h2><ul><li>Gradle</li><li>SDK Tools</li><li>Build Tools</li><li>Platforms Tools</li><li>Support Library</li><li>NDK</li></ul><a id="more"></a><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://gradle.org/" target="_blank" rel="external">Gradle</a>是新一代的自动化构建工具,是独立的工具，与Android Studio无关.<br>其他构建工具还有Ant、Maven(采用xml)，较为臃肿;<br>Gradle 采用的是一种叫做 Groovy 的语言，语法跟 Java 语法很像，但是是一种动态语言，而且在 Java 基础上做了不少改进，用起来更加简洁、灵活，而且 Gradle 完全兼容 Maven、Ivy</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>Google 在推出 AS 的时候选中了 Gradle 作为构建工具，为了支持 Gradle 能在 AS 上使用，Google 做了个 AS 的插件叫 Android Gradle Plugin，所以我们能在 AS 上使用 Gradle 完全是因为这个插件的原因.</p></blockquote><h4 id="gradle-plugin"><a href="#gradle-plugin" class="headerlink" title="gradle plugin"></a>gradle plugin</h4><p>在项目的根目录有个 build.gradle 文件中，有这样一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath &apos;com.android.tools.build:gradle:2.1.0&apos;</span><br></pre></td></tr></table></figure><p>这个就是依赖 gradle 插件的代码,版本号表示android gradle plugin 的版本，而不是gradle的版本<br>gradle 插件版本变化：<a href="http://tools.android.com/tech-docs/new-build-system" target="_blank" rel="external">new-build-system</a></p><h4 id="Gradle-Wrapper"><a href="#Gradle-Wrapper" class="headerlink" title="Gradle Wrapper"></a>Gradle Wrapper</h4><p>概念：Gradle Wrapper翻译过来就是 Gradle 的包装.<br><blockquote><p>假设我们本地有多个项目，一个是比较老的项目，还用着 Gradle 1.0 的版本，一个是比较新的项目用了 Gradle 2.0 的版本，但是你两个项目肯定都想要同时运行的，如果你只装了 Gradle 1.0 的话那肯定不行，所以为了解决这个问题，Google 推出了 Gradle Wrapper 的概念，就是他在你每个项目都配置了一个指定版本的 Gradle ，你可以理解为每个 Android 项目本地都有一个小型的 Gradle ，通过这个每个项目你可以支持用不同版本的 Gradle 来构建项目。</p></blockquote></p><p>gradle-wrapper.properties<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Mon Sep <span class="number">26</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">22</span> CST <span class="number">2016</span></span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper<span class="regexp">/dists</span></span><br><span class="line"><span class="regexp">zipStoreBase=GRADLE_USER_HOME</span></span><br><span class="line"><span class="regexp">zipStorePath=wrapper/</span>dists</span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-2.14.1-all.zip</span></span><br></pre></td></tr></table></figure></p><p>声明了 gradle 的目录与下载路径以及当前项目使用的 gradle 版本</p><h4 id="gradlew命令"><a href="#gradlew命令" class="headerlink" title="gradlew命令"></a>gradlew命令</h4><p>常用的命令</p><ul><li>./gradlew -v    版本</li><li>./gradlew clean 清除build文件夹</li><li>./gradlew build  检查依赖并编译打包（debug、release）</li><li>./gradlew assembleDebug 编译并打Debug包</li><li>./gradlew assembleRelease 编译并打Release的包</li></ul><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><p>如下图所示，有多个gradle文件</p><div style="width:50%"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/gw.png" width="50%"><br></div><p>Module:app、arms、rxerrorhandler<br>每个Module都有一个build.gradle文件（apply plugin: ‘com.android.library’）<br>工程：3、4、5<br>3:默认的内容就是声明了 android gradle plugin 的版本.<br>5:这个文件是全局的项目配置文件，里面主要声明一些需要加入 gradle 的 module</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">':app'</span>, <span class="string">':arms'</span>, <span class="string">':rxerrorhandler'</span></span><br></pre></td></tr></table></figure><p>看一下项目的根build.gradle<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.2"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"me.sandlz.rxjavademo"</span></span><br><span class="line">        minSdkVersion <span class="number">17</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>android节点</p><ul><li>compileSdkVersion<br>  编译sdk版本(建议采用高版本 - API变化)</li><li>buildToolsVersion<br>  编译tools版本</li><li>minSdkVersion<br>  最低兼容版本</li><li>targetSdkVersion<br>  目标sdk版本</li></ul><h3 id="SDK-Manager"><a href="#SDK-Manager" class="headerlink" title="SDK Manager"></a>SDK Manager</h3><p>先来一张图感受一下开发中所需的工具（图片来自网络）.</p><div style="width:80%"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/sdk_manager2.png" width="50%"><br></div><h4 id="SDK-Tools"><a href="#SDK-Tools" class="headerlink" title="SDK Tools"></a>SDK Tools</h4><p>Android sdk tools 开发工具集,包含开发中常用的工具，比如logcat,traceview,sqlite3等.<br>路径：yourSdkPath/tools</p><div style="width:50%"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/sdk_tools.png" width="50%"><br></div><h4 id="SDK-Build-Tools"><a href="#SDK-Build-Tools" class="headerlink" title="SDK Build Tools"></a>SDK Build Tools</h4><p>Android项目构建工具<br>路径：yourSdkPath/build-tools</p><h4 id="SDK-Platforms-Tools"><a href="#SDK-Platforms-Tools" class="headerlink" title="SDK Platforms Tools"></a>SDK Platforms Tools</h4><p>sdk platforms也是提供各种工具的，有adb,aapt,aidl等.<br>路径：yourSdkPath/platform-tools</p><h4 id="SDK-Platfrom"><a href="#SDK-Platfrom" class="headerlink" title="SDK Platfrom"></a>SDK Platfrom</h4><p>对应平台的开发工具，需要在哪个版本的平台下开发就下载哪个(可多个)<br>路径：yourSdkPath/platforms</p><h4 id="SDK-Support-Library"><a href="#SDK-Support-Library" class="headerlink" title="SDK Support Library"></a>SDK Support Library</h4><p>在低版本平台实现高版本平台控件效果时提供支持<br>路径：yourSdkPath/extras/android/m2repository/com/android<br>下图红色箭头标注了一些常用的包</p><div style="width:70%"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/support_library.png" width="50%"><br></div><h4 id="Android-Support-Repository"><a href="#Android-Support-Repository" class="headerlink" title="Android Support Repository"></a>Android Support Repository</h4><p>方便在gradle中使用Android Support Libraries，因为Google并没有把这些库发布到maven center或者jcenter去，而是使用了Google自己的maven仓库<br>路径：yourSdkPath/extras/android/support</p><h3 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h3><p>参考文献：<br><a href="http://gold.xitu.io/entry/5778f8bd165abd0054b443b0/promote?utm_source=baidu&amp;utm_medium=keyword&amp;utm_content=android_gradle&amp;utm_campaign=q3_search" target="_blank" rel="external">Gradle普及</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Environment: Mac + Android Studio(2.2) &lt;/p&gt;
&lt;h2 id=&quot;You-need-konw&quot;&gt;&lt;a href=&quot;#You-need-konw&quot; class=&quot;headerlink&quot; title=&quot;You need konw&quot;&gt;&lt;/a&gt;You need konw&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Gradle&lt;/li&gt;
&lt;li&gt;SDK Tools&lt;/li&gt;
&lt;li&gt;Build Tools&lt;/li&gt;
&lt;li&gt;Platforms Tools&lt;/li&gt;
&lt;li&gt;Support Library&lt;/li&gt;
&lt;li&gt;NDK&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Android" scheme="http://sandlz.me/tags/Android/"/>
    
      <category term="Gradle" scheme="http://sandlz.me/tags/Gradle/"/>
    
      <category term="Android Studio" scheme="http://sandlz.me/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>RxJava学习笔记(一) - 基础篇</title>
    <link href="http://sandlz.me/2016/08/18/RxJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)-%E5%9F%BA%E7%A1%80/"/>
    <id>http://sandlz.me/2016/08/18/RxJava学习笔记(一)-基础/</id>
    <published>2016-08-18T07:47:50.000Z</published>
    <updated>2017-03-25T10:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RxJava-简介"><a href="#RxJava-简介" class="headerlink" title="RxJava 简介"></a>RxJava 简介</h2><h3 id="什么是RxJava"><a href="#什么是RxJava" class="headerlink" title="什么是RxJava?"></a>什么是RxJava?</h3><p>RxJava 是一个响应式编程框架，由 Netflix 开发的响应式扩展（Reactive Extensions）的Java实现,是一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库.</p><h3 id="能为开发者带来-做-什么？"><a href="#能为开发者带来-做-什么？" class="headerlink" title="能为开发者带来(做)什么？"></a>能为开发者带来(做)什么？</h3><p>特点</p><ul><li>简洁、简洁、简洁</li></ul><p>随着业务逻辑的复杂，代码的可读性逐渐降低，RxJava相比较于AsyncTask、Handler等让异步代码更为简洁.<br><a id="more"></a></p><p>做什么？</p><ul><li>异步操作<ul><li>网络访问(搭配Retrofit更佳)</li><li>数据库的读写</li><li>大图片的载入</li><li>文件压缩/解压</li></ul></li><li>绑定事件(需RxBinding)</li><li>RxBus(事件总线)<ul><li>代替<a href="http://blog.csdn.net/harvic880925/article/details/40660137" target="_blank" rel="external">EventBus</a></li></ul></li></ul><p>注：若是第一次使用RxJava或想使用RxJava，推荐阅读扔物线的<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></p><h2 id="引入到项目中"><a href="#引入到项目中" class="headerlink" title="引入到项目中"></a>引入到项目中</h2><p>首先，我们需要添加如下依赖：<br>rxandroid是针对Android平台的扩展<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.1.8'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.2.1'</span></span><br></pre></td></tr></table></figure></p><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>RxJava 的观察者模式，包含四个基本概念：</p><ul><li>Observable(被观察者)</li><li>Observer(观察者)</li><li>subscribe(订阅)</li><li>Event(事件)<br>简述：Observable发出事件，Observer处理事件，通过subscribe()实现两者的订阅。</li></ul><p>这些概念可能比较模式，不太容易理解，还是通过代码来解释吧~</p><h2 id="编写Hello-world"><a href="#编写Hello-world" class="headerlink" title="编写Hello world"></a>编写Hello world</h2><blockquote><p>要求：在页面上显示Hello world</p></blockquote><p>此例仅用于说明其用法，在实际开发中并无实际意义.</p><p>实现1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用Observable 发出事件</span></span><br><span class="line">Observable&lt;List&lt;String&gt;&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> List&lt;String&gt;&gt; subscriber)</span> </span>&#123;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    list.add(<span class="string">"hello world "</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">                subscriber.onNext(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// Observer 处理事件</span></span><br><span class="line">Observer&lt;List&lt;String&gt;&gt; observer= <span class="keyword">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">                mvpView.callBackGetDataResult(strings);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">// 或者使用Subscriber 处理事件</span></span><br><span class="line">Subscriber&lt;List&lt;String&gt;&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;String&gt; s)</span> </span>&#123;</span><br><span class="line">                mvpView.callBackGetDataResult(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure></p><blockquote><p>RxJava 还内置了一个实现了 Observer 的抽象类：Subscriber<br>Subscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的.<br>Observer 在subscribe()中最终会被转换成Subscriber对象，所以建议使用Subscriber对象.</p></blockquote><p>区别：Subscriber</p><ul><li>onStart()<br>  在 subscribe 刚开始，而事件还未发送之前被调用</li><li>unsubscribe()<br>  用于取消订阅，防止内存泄漏</li></ul><p>解析：<br>当Observable被订阅时，Observable的call()方法会被调用，事件序列就会依次触发；subscriber.onNext(list)：被观察者调用了观察者的回调方法，实现了由被观察者向观察者的事件传递。<br>observable.subscribe(observer);返回Subscription 方便unsubscribe();</p><p>上面的create()方法是 RxJava 最基本的创造事件序列的方法,基于这个，RxJava 还提供了一些快捷的创建事件的方法，如just(T),from(T[]) / from(Iterable&lt;? extends T&gt;),将传入的数组或 Iterable 拆分成具体对象后，依次发送出来.<br>下面就实现一下这种简便的方式</p><p>实现2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    list.add(<span class="string">"hello world "</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">Observable.just(list)</span><br><span class="line">        .subscribeOn(Schedulers.computation())<span class="comment">// 计算线程</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">// 回调主线程</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;String&gt; s)</span> </span>&#123;</span><br><span class="line">                mvpView.callBackGetDataResult(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>解析：</p><ol><li>如 1-5 行代码所示，可以简便的发出事件.</li><li>Action1<t>是什么？<br> RxJava 提供了多个ActionX的接口，用于包装不同的无返回值的方法.<br> subscribe时自动创建 Subscriber ，并使用 new 出来的Action1<t> 来定义 onNext()详情见下面的subscribe方法（官方）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Subscription <span class="title">subscribe</span><span class="params">(<span class="keyword">final</span> Action1&lt;? <span class="keyword">super</span> T&gt; onNext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (onNext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"onNext can not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Action1&lt;Throwable&gt; onError = InternalObservableUtils.ERROR_NOT_IMPLEMENTED;</span><br><span class="line">        Action0 onCompleted = Actions.empty();</span><br><span class="line">        <span class="keyword">return</span> subscribe(<span class="keyword">new</span> ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></t></li></ol><p>此时，读者可能要问了 subscribeOn()、observeOn是什么鬼？<br>别急，下面一一解释.</p><h2 id="线程调度器（Schedulers）"><a href="#线程调度器（Schedulers）" class="headerlink" title="线程调度器（Schedulers）"></a>线程调度器（Schedulers）</h2><blockquote><p>在不指定线程的情况下，RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler（调度器）.</p></blockquote><p>内置的Schedulers：</p><ul><li>Schedulers.immediate():直接在当前线程运行（默认）</li><li>Schedulers.newThread():新的线程</li><li>Schedulers.io():I/O 操作（文件、数据库、网络请求等）</li><li>Schedulers.computation():计算</li></ul><p>另外，Android本身提供一种：AndroidSchedulers.mainThread()</p><p>上面使用的subscribeOn()、observeOn(）分别对应subscribe() 所发生的线程(事件产生的线程)、事件消费的线程.</p><p>有了线程调度器，我们就无需写冗长的新建线程代码了~</p><p>好了，到这里相信大家对Rxjava的使用和优势有了一定的认识，下面会继续学习其他的一些特性，更好的开发App…</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></p><p><a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">深入浅出RxJava</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RxJava-简介&quot;&gt;&lt;a href=&quot;#RxJava-简介&quot; class=&quot;headerlink&quot; title=&quot;RxJava 简介&quot;&gt;&lt;/a&gt;RxJava 简介&lt;/h2&gt;&lt;h3 id=&quot;什么是RxJava&quot;&gt;&lt;a href=&quot;#什么是RxJava&quot; class=&quot;headerlink&quot; title=&quot;什么是RxJava?&quot;&gt;&lt;/a&gt;什么是RxJava?&lt;/h3&gt;&lt;p&gt;RxJava 是一个响应式编程框架，由 Netflix 开发的响应式扩展（Reactive Extensions）的Java实现,是一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库.&lt;/p&gt;
&lt;h3 id=&quot;能为开发者带来-做-什么？&quot;&gt;&lt;a href=&quot;#能为开发者带来-做-什么？&quot; class=&quot;headerlink&quot; title=&quot;能为开发者带来(做)什么？&quot;&gt;&lt;/a&gt;能为开发者带来(做)什么？&lt;/h3&gt;&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简洁、简洁、简洁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着业务逻辑的复杂，代码的可读性逐渐降低，RxJava相比较于AsyncTask、Handler等让异步代码更为简洁.&lt;br&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Android" scheme="http://sandlz.me/tags/Android/"/>
    
      <category term="RxJava" scheme="http://sandlz.me/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android之MVP</title>
    <link href="http://sandlz.me/2016/08/17/Android%E4%B9%8BMVP/"/>
    <id>http://sandlz.me/2016/08/17/Android之MVP/</id>
    <published>2016-08-17T09:38:17.000Z</published>
    <updated>2017-03-25T10:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="为什么使用MVP"><a href="#为什么使用MVP" class="headerlink" title="为什么使用MVP?"></a>为什么使用MVP?</h3><p>在Android中，允许View和其它线程共存于Activity内。其实最大的问题莫过于在Activity中同时存在业务逻辑和UI逻辑,使得Activity变得很臃肿，这会增加测试和维护的成本。<br>因此产生了MVP、MVVM等设计模式。</p><h3 id="什么是MVP？"><a href="#什么是MVP？" class="headerlink" title="什么是MVP？"></a>什么是MVP？</h3><p>MVP 对应的是Model、View和Presenter.</p><ul><li>MODEL<br>  数据层（网络数据、本地数据库等）</li><li>VIEW<br>  视图层（视图展示、用户事件）</li><li>PRESENTER<br>  桥梁/适配器（VIEW - MODEL）</li></ul><a id="more"></a><p>下图是MVP架构的模式之一<br>View - 视图层<br>Presenter - View与Model之间的适配器<br>Model - 数据层，包含数据的获取或存储及实体类等</p><div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/mvp.png" width="430" height="328" alt="图片名称" align="center"><br></div><p>注：高层接口不能，不应该，并且必须不了解底层接口的细节，是（面向）抽象的，并且是细节隐藏的.</p><h3 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h3><p>优点</p><ul><li>层次清晰</li><li>耦合度低</li><li>维护性高</li></ul><p>缺点</p><ul><li>可能产生额外的学习成本 (活到老学到老,不是么~)</li></ul><h2 id="推荐的设计模式"><a href="#推荐的设计模式" class="headerlink" title="推荐的设计模式"></a>推荐的设计模式</h2><p>下面推荐使用的一种设计模式，如下图所示：</p><div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/app_stream.png" width="430" height="328" alt="图片名称" align="center"><br></div><p>View 、 Presenter层职责清晰，用于页面的处理；<br>DataManager用于数据的获取</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ribot/android-boilerplate" target="_blank" rel="external">android-boilerplate</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;h3 id=&quot;为什么使用MVP&quot;&gt;&lt;a href=&quot;#为什么使用MVP&quot; class=&quot;headerlink&quot; title=&quot;为什么使用MVP?&quot;&gt;&lt;/a&gt;为什么使用MVP?&lt;/h3&gt;&lt;p&gt;在Android中，允许View和其它线程共存于Activity内。其实最大的问题莫过于在Activity中同时存在业务逻辑和UI逻辑,使得Activity变得很臃肿，这会增加测试和维护的成本。&lt;br&gt;因此产生了MVP、MVVM等设计模式。&lt;/p&gt;
&lt;h3 id=&quot;什么是MVP？&quot;&gt;&lt;a href=&quot;#什么是MVP？&quot; class=&quot;headerlink&quot; title=&quot;什么是MVP？&quot;&gt;&lt;/a&gt;什么是MVP？&lt;/h3&gt;&lt;p&gt;MVP 对应的是Model、View和Presenter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MODEL&lt;br&gt;  数据层（网络数据、本地数据库等）&lt;/li&gt;
&lt;li&gt;VIEW&lt;br&gt;  视图层（视图展示、用户事件）&lt;/li&gt;
&lt;li&gt;PRESENTER&lt;br&gt;  桥梁/适配器（VIEW - MODEL）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Android" scheme="http://sandlz.me/tags/Android/"/>
    
      <category term="MVP" scheme="http://sandlz.me/tags/MVP/"/>
    
      <category term="设计模式" scheme="http://sandlz.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Git命令</title>
    <link href="http://sandlz.me/2016/08/15/Git%E5%91%BD%E4%BB%A4/"/>
    <id>http://sandlz.me/2016/08/15/Git命令/</id>
    <published>2016-08-15T08:30:05.000Z</published>
    <updated>2016-08-20T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<br>分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Mac </p><ul><li>Homebrew安装<br>  brew install git </li><li>Xcode安装<br>  安装Command line tools</li></ul><a id="more"></a><h2 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h2><p>在任意文件夹下，如/Users/xxx/Documents/studyGit</p><ol><li>打开终端<br> cd 指定的目录</li><li>建立仓库<br> git init</li><li>添加文件<br> git add xxx</li><li>提交<br> git commit -m “xxx”</li></ol><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ol><li>查看状态<br> git status</li><li>查看区别<br> git diff<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3></li><li>查看提交历史<br> git log<br> 确定回退到哪个版本</li><li>退回上个版本<br> git reset –hard HEAD^<br> HEAD^代表上一个版本，HEAD^^以此类推 HEAD~100</li><li>根据commit id<br> git reset –hard 3628164</li><li>查看命令历史<br> git reflog<br> 确定要回到未来的哪个版本</li></ol><h3 id="放弃修改"><a href="#放弃修改" class="headerlink" title="放弃修改"></a>放弃修改</h3><ol><li>放弃修改<ul><li>git checkout – xxx</li></ul></li></ol><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol><li>删除版本库中文件<ul><li>git rm xxx git commit -m “xxx”</li></ul></li><li>误删回退<ul><li>git checkout – xxx</li></ul></li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li>添加远程库<ul><li>登录Github，新建一个仓库并命名</li><li>git remote add origin git@github.com:SandLZ/xxx.git(本地仓库关联到远程仓库)</li><li>推送到远程仓库 git push -u origin master（first time）</li><li>git push origin master(other time)</li></ul></li><li>从远程库Clone<ul><li>登录Github，新建一个仓库并命名</li><li>Clone git clone git@github.com:SandLZ/xxx.git</li></ul></li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>分支可用于项目的版本迭代管理，例如创建一个dev分支.</p><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><ol><li>创建分支<ul><li>git branch dev</li></ul></li><li>切换分支<ul><li>git checkout dev</li></ul></li><li>创建并切换<ul><li>git checkout -b dev</li></ul></li><li>查看当前分支（当前分支以 * 标识）<ul><li>git branch</li></ul></li></ol><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ol><li>切换到master分支<ul><li>git checkout master</li></ul></li><li>合并到master分支<ul><li>git merge dev</li></ul></li></ol><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ol><li>git branch -d dev</li></ol><p>参考资料<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。&lt;br&gt;分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Mac &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Homebrew安装&lt;br&gt;  brew install git &lt;/li&gt;
&lt;li&gt;Xcode安装&lt;br&gt;  安装Command line tools&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="git" scheme="http://sandlz.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>WebApp开发常见问题汇总</title>
    <link href="http://sandlz.me/2016/07/28/WebApp%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://sandlz.me/2016/07/28/WebApp开发常见问题汇总/</id>
    <published>2016-07-28T01:19:24.000Z</published>
    <updated>2016-10-24T03:31:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote><p>问题描述：<br>首先是页面构成<br>目前有3个页面：首页（A）、统计信息（B）、详情（C）<br>B页面有B1、B2两个tab页组成;<br>C页面即详情页面（B跳转）<br>问题：<br>A-&gt;B-&gt;C 当由C返回B时，我们希望保留B的状态，于是设置了B页面的缓存为true(cache: true);<br>此时，问题来了…<br>继续返回到A时，再次进入B，还是保留在B的原状态.原因就是设置了缓存…<br>而我们想要的是每次进入B，都是最新的数据和状态，即B1</p></blockquote><a id="more"></a><div style="width:50%"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/B.png" width="10%" height="20%" alt="图片名称" align="left"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/C.png" width="10%" height="20%" alt="图片名称"><br></div><p>解决方案：<br>在首页，清除缓存-每次进入B即最新B1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ionicHistory.clearCache();</span><br></pre></td></tr></table></figure><p>参考：<a href="http://stackoverflow.com/questions/28676631/is-it-possible-to-clear-the-view-cache-in-ionic" target="_blank" rel="external">view cache</a></p><h2 id="ionicPopup弹出框"><a href="#ionicPopup弹出框" class="headerlink" title="$ionicPopup弹出框"></a>$ionicPopup弹出框</h2><blockquote><p>基本使用：<a href="http://www.ionic.wang/js_doc-index-id-52.html" target="_blank" rel="external">$ionicPopup</a><br>问题描述：点击页面空白部分，关闭弹出框</p></blockquote><p>解决方案：<br>新建ClosePopupService.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'myApp.services'</span>)</span><br><span class="line">  .factory(<span class="string">'ClosePopupService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$document, $ionicPopup, $timeout</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lastPopup;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    register: <span class="function"><span class="keyword">function</span>(<span class="params">popup</span>) </span>&#123;</span><br><span class="line">      $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> element = $ionicPopup._popupStack.length&gt;<span class="number">0</span> ? $ionicPopup._popupStack[<span class="number">0</span>].element : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(!element || !popup || !popup.close) <span class="keyword">return</span>;</span><br><span class="line">        element = element &amp;&amp; element.children ? angular.element(element.children()[<span class="number">0</span>]) : <span class="literal">null</span>;</span><br><span class="line">        lastPopup  = popup;</span><br><span class="line">        <span class="keyword">var</span> insideClickHandler = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">          event.stopPropagation();</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> outsideHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          popup.close();</span><br><span class="line">        &#125;;</span><br><span class="line">        element.on(<span class="string">'click'</span>, insideClickHandler);</span><br><span class="line">        $<span class="built_in">document</span>.on(<span class="string">'click'</span>, outsideHandler);</span><br><span class="line">        popup.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          lastPopup = <span class="literal">null</span>;</span><br><span class="line">          element.off(<span class="string">'click'</span>, insideClickHandler);</span><br><span class="line">          $<span class="built_in">document</span>.off(<span class="string">'click'</span>, outsideHandler);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    closeActivePopup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(lastPopup) &#123;</span><br><span class="line">        $timeout(lastPopup.close);</span><br><span class="line">        <span class="keyword">return</span> lastPopup;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>控制器中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$scope.show = <span class="function"><span class="keyword">function</span> (<span class="params">placeId</span>) </span>&#123;</span><br><span class="line">      $scope.detail = &#123;<span class="attr">name</span>:<span class="string">"test"</span>&#125;;</span><br><span class="line">      <span class="keyword">var</span> popupConfig = &#123;</span><br><span class="line">        templateUrl:<span class="string">'templates/popview.html'</span>,</span><br><span class="line">        title: $scope.detail.name,</span><br><span class="line">        scope: $scope</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> popup = $ionicPopup.show(popupConfig);</span><br><span class="line">      ClosePopupService.register(popup);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;问题描述：&lt;br&gt;首先是页面构成&lt;br&gt;目前有3个页面：首页（A）、统计信息（B）、详情（C）&lt;br&gt;B页面有B1、B2两个tab页组成;&lt;br&gt;C页面即详情页面（B跳转）&lt;br&gt;问题：&lt;br&gt;A-&amp;gt;B-&amp;gt;C 当由C返回B时，我们希望保留B的状态，于是设置了B页面的缓存为true(cache: true);&lt;br&gt;此时，问题来了…&lt;br&gt;继续返回到A时，再次进入B，还是保留在B的原状态.原因就是设置了缓存…&lt;br&gt;而我们想要的是每次进入B，都是最新的数据和状态，即B1&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Cordova" scheme="http://sandlz.me/tags/Cordova/"/>
    
      <category term="Ionic" scheme="http://sandlz.me/tags/Ionic/"/>
    
      <category term="WebApp" scheme="http://sandlz.me/tags/WebApp/"/>
    
      <category term="常见问题" scheme="http://sandlz.me/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发常见问题汇总</title>
    <link href="http://sandlz.me/2016/07/26/Android%20%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://sandlz.me/2016/07/26/Android 开发常见问题汇总/</id>
    <published>2016-07-26T02:41:24.000Z</published>
    <updated>2017-03-25T10:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android 开发过程中难免遇到错误和一些奇怪的现象，一般来说，基本上都是我们的程序写的不够完善.</p><p>现在的异常越多-以后的BUG越少</p><p>下面记录一些我遇到的异常、错误情况，不定期更新~<br><a id="more"></a></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>包含功能上出现的bug、代码质量较差引起的Exception等.</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><h4 id="Map-lt-gt-字典数据不一致"><a href="#Map-lt-gt-字典数据不一致" class="headerlink" title="Map&lt;&gt; 字典数据不一致"></a>Map&lt;&gt; 字典数据不一致</h4><p>描述：将一组数据存入Map<string,string>,Map<string,string> testMap = new HashMap();<br>Android 5.0及以上系统与以下取出的数据不一致.<br>原因：大致判断为HashMap() API变化导致.查看官方文档，果然是…<br>解决方案：<br>使用TreeMap()<br>HashMap：适用于在Map中插入、删除和定位元素<br>Treemap：适用于按自然顺序或自定义顺序遍历键(key)<br>参考：<a href="http://www.2cto.com/kf/201507/421405.html" target="_blank" rel="external">Android 5.0之后对HashMap的修改</a></string,string></string,string></p><h4 id="拍照后Activity重新进入（页面重新加载）"><a href="#拍照后Activity重新进入（页面重新加载）" class="headerlink" title="拍照后Activity重新进入（页面重新加载）"></a>拍照后Activity重新进入（页面重新加载）</h4><p>描述：在App中，一般会使用到拍照上传功能.使用了一个临时(多张照片)的全局变量存储照片地址，发现拍照完成后，页面数据重置了…<br>原因：拍照过程中，我们会改变手机的方向，即横拍与竖拍.导致Activity监测到旋转，重新计算内容大小，onCreate()<br>解决方案：AndroidManifest.xml中，对应的Activity 添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:configChanges=&quot;orientation|screenSize&quot;</span><br></pre></td></tr></table></figure></p><p>如需处理旋转事件：重写onConfigurationChanged()</p><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><h4 id="NullPointer"><a href="#NullPointer" class="headerlink" title="NullPointer"></a>NullPointer</h4><p>描述：空指针异常，是很常见的错误.<br>原因：访问某个Null对象<br>解决方案：使用前加判断</p><h4 id="IndexOutOfBounds"><a href="#IndexOutOfBounds" class="headerlink" title="IndexOutOfBounds"></a>IndexOutOfBounds</h4><p>描述：数组访问越界.<br>原因：访问某个超出数组大小的数组元素<br>解决方案：使用前加判断访问的下标是否超出数组大小</p><h4 id="is-not-translated-in-“af”-Afrikaans-…"><a href="#is-not-translated-in-“af”-Afrikaans-…" class="headerlink" title="is not translated in “af” (Afrikaans)…"></a>is not translated in “af” (Afrikaans)…</h4><p>描述：打包时报错<br>原因：多语言<br>解决方案：对应文件-resources节点增加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore="MissingTranslation"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Android 开发过程中难免遇到错误和一些奇怪的现象，一般来说，基本上都是我们的程序写的不够完善.&lt;/p&gt;
&lt;p&gt;现在的异常越多-以后的BUG越少&lt;/p&gt;
&lt;p&gt;下面记录一些我遇到的异常、错误情况，不定期更新~&lt;br&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Android" scheme="http://sandlz.me/tags/Android/"/>
    
      <category term="Exception" scheme="http://sandlz.me/tags/Exception/"/>
    
      <category term="Error" scheme="http://sandlz.me/tags/Error/"/>
    
      <category term="技巧" scheme="http://sandlz.me/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>IonicFramework 之 Hybrid App开发</title>
    <link href="http://sandlz.me/2016/07/25/IonicFramework%E4%B9%8BHybrid%20App%E5%BC%80%E5%8F%91/"/>
    <id>http://sandlz.me/2016/07/25/IonicFramework之Hybrid App开发/</id>
    <published>2016-07-25T03:28:34.000Z</published>
    <updated>2016-10-24T04:41:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Ionic(ionicframework)一款接近原生的Html5移动App开发框架,主要有以下特点：</p><ul><li>UI组件丰富</li><li>性能较强</li><li>开发周期短</li><li>web技术</li></ul><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>官网下载并安装<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a><br>更换npm(node package manager)的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#先移除之前的源，因为国内访问比较慢或者访问不了</span><br><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">#添加淘宝的镜像源</span><br><span class="line">gem sources -a http://ruby.taobao.org/</span><br><span class="line">#查看一下有没有更新成功</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><h3 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h3><p>Apache Cordova 提供用 Javascript 访问移动平台的 API ,<br>实际应用中，通过插件的方式来调用原生移动平台的Api.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure><h3 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h3><p>ionic是什么？</p><p>Ionic(ionicframework)一款开源的Html5移动App开发框架,是AngularJS移动端解决方案,Ionic以流行的跨平台移动app开发框架phoengap/Cordova为蓝本，让开发者可以通过命令行工具快速生成android  ios移动app应用.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ionic</span><br></pre></td></tr></table></figure><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>推荐使用 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA</a></p><p>常用插件：</p><ul><li>ionic</li><li>cordova</li><li>markdown</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 构建所有平台代码</span><br><span class="line">ionic build</span><br><span class="line"># 构建Android</span><br><span class="line">ionic build android</span><br><span class="line"># 构建ios 模拟器</span><br><span class="line">ionic build ios</span><br><span class="line"># 构建ios 设备</span><br><span class="line">ionic build --device ios</span><br><span class="line"># 运行app到设备上</span><br><span class="line">ionic run --device ios/android</span><br><span class="line"># 运行在模拟器上（android genymotion 请用--device）</span><br><span class="line">ionic run --emulate ios/android</span><br><span class="line"></span><br><span class="line"># 开启本地浏览器调试</span><br><span class="line">ionic serve</span><br><span class="line"># 添加ios平台</span><br><span class="line">ionic platform add ios</span><br><span class="line"># 移除android平台</span><br><span class="line">ionic platform remove android</span><br><span class="line"># 安装插件 xxx可以为id，目录，url</span><br><span class="line">cordova plugin add xxx</span><br><span class="line"># 移除插件 xxx只能为插件id</span><br><span class="line">cordova plugin remove xxxx</span><br></pre></td></tr></table></figure><h2 id="示例工程"><a href="#示例工程" class="headerlink" title="示例工程"></a>示例工程</h2><p>工程地址：<a href="https://github.com/SandLZ/myApp.git" target="_blank" rel="external">myApp</a></p><p>插件地址：<a href="https://github.com/SandLZ/myFirstPlugin.git" target="_blank" rel="external">myFirstPlugin</a></p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>MVC设计模式</p><p>模块:</p><p>模块可以说是AngularJS 的根本。它包含配置、控制、过滤、工厂模式、指令及其它模块.</p><ul><li>module 应用开发模块</li><li>controller 控制器</li><li>scope 为视图提供绑定数据</li><li>filter 数据传输到视图之前修改数据</li><li>directive 可复用的UI元素</li><li>factory、service 为其他模块元素提供服务</li></ul><p><br></p><hr><p><br></p><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><h4 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h4><p>打开终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp sidemenu</span><br></pre></td></tr></table></figure><p>sidemenu是ionic 提供的模板，其他模板包括：</p><p>blank ……………. A blank starter project for Ionic</p><p>complex-list ……… A complex list starter template</p><p>maps …………….. An Ionic starter project using Google Maps and a side menu</p><p>salesforce ……….. A starter project for Ionic and Salesforce</p><p>sidemenu …………. A starting project for Ionic using a side menu with navigation in the content area</p><p>tabs …………….. A starting project for Ionic using a simple tabbed interface</p><p>tests ……………. A test of different kinds of page navigation</p><p>控制台会输出一下信息：</p><div width="50%"><br><img src="ScreenShots/myApp.png" style="width:60%"><br><br></div><h4 id="添加平台支持"><a href="#添加平台支持" class="headerlink" title="添加平台支持"></a>添加平台支持</h4><p>新建工程时，会默认的添加ios平台.</p><p>如需添加其他平台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic platforms add android</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><ol><li><p>浏览器</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic serve</span><br></pre></td></tr></table></figure><p> 会自动打开默认的浏览器</p> <div width="50%"><br> <img src="http://7xsap2.com1.z0.glb.clouddn.com/githubionic_serve.png" style="width:30%"><br> <br> </div></li><li><p>真机/模拟器</p><p> 首先，安装真机调试</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ios-deploy</span><br></pre></td></tr></table></figure><p> 编译</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic build ios</span><br></pre></td></tr></table></figure><p> 运行</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic run --emulate ios</span><br></pre></td></tr></table></figure></li></ol><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><ul><li><p>IOS</p><p>  手机 设置-&gt;Safari-&gt;高级-&gt;web检查器<br>  电脑 Safari 浏览器，开发-&gt;你的手机</p></li><li><p>Android</p><p>  打开Chrome,输入：chrome://inspect/#devices（首次需翻墙）</p></li></ul><p><br></p><hr><p><br></p><h3 id="工程示例"><a href="#工程示例" class="headerlink" title="工程示例"></a>工程示例</h3><p>工程地址：<a href="https://github.com/SandLZ/myApp.git" target="_blank" rel="external">myApp</a></p><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><ul><li>路由<br>  控制页面跳转</li><li>指令<br>  自定义组件等<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4></li></ul><p>结构：</p><div width="50%"><br>    <img src="http://7xsap2.com1.z0.glb.clouddn.com/githubmyApp_project.png" style="width:30%" align="right"><br>    <br></div><ul><li>hooks<br>  编译cordova时自定义的脚本命令，方便整合到我们的编译系统和版本控制系统中</li><li>platforms<ul><li>ios</li><li>android</li></ul></li><li>plugins<br>  cordova插件的目录</li><li>scss<br>  scss文件，发布时编译这个目录下的文件输出到www的css目录中</li><li>www<br>  样式、图片、脚本、资源库、页面、配置<ul><li>css</li><li>img</li><li>js</li><li>lib</li><li>templates </li><li>index.html</li></ul></li><li>bower.json<br>  bower配置文件</li><li>config.xml<br>  Ionic的配置文件 可以配置app的id，名称、描述起始页和一起其他配置</li><li>gulpfile.js<br>  gulp构建工具的执行文件，在这个文件中创建任务实现编译scss，css、js优化等</li><li>ionic.project<br>  Ionic的项目文件可以配置Ionic命令中livereload的监控文件</li><li>package.json<br>  npm配置文件</li></ul><h4 id="示例：top250电影"><a href="#示例：top250电影" class="headerlink" title="示例：top250电影"></a>示例：top250电影</h4><p>获取豆瓣Top250电影并展示.</p><p>如下图：</p><div width="50%"><br>    <img src="http://7xsap2.com1.z0.glb.clouddn.com/githubmovie_list.png" style="width:25%" align="middle"><br>    <br>    <img src="http://7xsap2.com1.z0.glb.clouddn.com/githubmovie_detail.png" style="width:25%" align="middle"><br>    <br></div><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>按模块划分，每个模块拥有独立的Controller、Service、View<br><br></p><div width="50%"><br>    <img src="http://7xsap2.com1.z0.glb.clouddn.com/githubmovie_module.png" style="width:48%" align="right"><br>    <br></div><ul><li><p>Service</p><p>  movie_service.js</p></li><li><p>Controller</p><p>  movie_ctrl.js</p><p>  movie_detail_ctrl.js</p></li><li><p>View</p><p>  templates/movieList.html</p><p>  templates/movieDetail.html</p></li></ul><p>movie_service 请求数据；</p><p>movie_ctrl/movie_detail_ctrl 处理数据及业务逻辑；</p><p>movieList.html/movieDetail.html 展示数据</p><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><ol><li>数据绑定</li></ol><pre><code>$scope 的使用贯穿整个 App 应用,它与数据模型相关联,同时也是表达式执行的上下文.有了 $scope 就在视图和控制器之间建立了一个通道,基于作用域视图在修改数据时会立刻更新 $scope,同样的 $scope 发生改变时也会立刻重新渲染视图.html通过{{movie.title}}方式绑定控制器里的变量.</code></pre><ol><li><p>依赖注入</p><p> angular.module(name,requires,configFn)</p><p> name：字符串类型，代表模块的名称；</p><p> requires：字符串的数组，代表该模块依赖的其他模块列表，如果不依赖其他模块，用空数组即可；</p><p> configFn：用来对该模块进行一些配置。</p><p> 3要素：服务的注册、依赖关系的声明、对象的获取</p><p> 首先，看一下module的定义：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The angular.module() is a global place for creating, registering </span><br><span class="line">and retrieving Angular modules.When passed two or more arguments, </span><br><span class="line">a new module is created. If passed only one argument, an existing</span><br><span class="line">module (the name passed as the first argument to module) is </span><br><span class="line">retrieved。</span><br></pre></td></tr></table></figure><p> 创建：</p><pre><code>angular.module(&quot;myApp&quot;, []);传递参数不止一个,代表新建模块;空数组代表该模块不依赖其他模块</code></pre><p> 获取</p><pre><code>angular.module(&quot;myApp.service&quot;);只有一个参数(模块名),代表获取模块如果模块不存在,angular框架会抛异常</code></pre></li></ol><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h6><p>app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;myApp&apos;, [</span><br><span class="line">  &apos;ionic&apos;,</span><br><span class="line">  &apos;myApp.controllers&apos;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">angular.module(&apos;myApp.controllers&apos;, [&apos;myApp.services&apos;]);</span><br><span class="line">angular.module(&apos;myApp.services&apos;, []);</span><br></pre></td></tr></table></figure><p>注册myApp模块，依赖于[ ‘ionic’,’myApp.controllers’]<br>注册controllers、services<br>由于controller一般都依赖于services层，所以注册的时候直接依赖.</p><p>Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;myApp.services&apos;)</span><br><span class="line">  .factory(&apos;Movie&apos;,[&apos;authHttp&apos;,&apos;$q&apos;, function (authHttp,$q) &#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      getMovieByPage: function (current, count) &#123;</span><br><span class="line">        var params=&#123;start:current, count:count&#125;;</span><br><span class="line">        var deferred=$q.defer();</span><br><span class="line">        authHttp.post(</span><br><span class="line">          &apos;https://api.douban.com/v2/movie/top250&apos;,</span><br><span class="line">          JSON.stringify(params))</span><br><span class="line">          .success(function (data,status,headers,config) &#123;</span><br><span class="line">            if(data!=null &amp;&amp; data!=undefined)&#123;</span><br><span class="line">              if(data.result &amp;&amp;data.result.errorCode==0)&#123;</span><br><span class="line">                deferred.resolve(data.result.content.data);</span><br><span class="line">                return;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            deferred.resolve(data);</span><br><span class="line">          &#125;)</span><br><span class="line">          .error(function (data,status,headers,config) &#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">            deferred.reject(data);</span><br><span class="line">          &#125;);</span><br><span class="line">        return deferred.promise;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;]);</span><br></pre></td></tr></table></figure><p>注：factory</p><p>factory()让我们通过返回一个包含service方法和数据的对象来定义一个service。在service方法里面我们可以注入services，比如 $authHttp 和 $q等。</p><p>在控制器层需使用时，只需简单的注入即可.</p><p>Controller</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;myApp.controllers&apos;)</span><br><span class="line">  .controller(&apos;MovieCtrl&apos;, function($scope, $ionicHistory, Movie, $location) &#123;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>当业务比较复杂或ionicFramework已经不能满足我们的开发需求时，我们就需要对专门的移动平台编写插件.</p><p>插件部分参照我的插件工程，有详细的使用说明.</p><p>插件地址：<a href="https://github.com/SandLZ/myFirstPlugin.git" target="_blank" rel="external">myFirstPlugin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Ionic(ionicframework)一款接近原生的Html5移动App开发框架,主要有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI组件丰富&lt;/li&gt;
&lt;li&gt;性能较强&lt;/li&gt;
&lt;li&gt;开发周期短&lt;/li&gt;
&lt;li&gt;web技术&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Cordova" scheme="http://sandlz.me/tags/Cordova/"/>
    
      <category term="Ionic" scheme="http://sandlz.me/tags/Ionic/"/>
    
      <category term="framwork" scheme="http://sandlz.me/tags/framwork/"/>
    
      <category term="Hybrid App" scheme="http://sandlz.me/tags/Hybrid-App/"/>
    
  </entry>
  
  <entry>
    <title>AngularJs-Chart的使用</title>
    <link href="http://sandlz.me/2016/07/17/AngularJs-Chart/"/>
    <id>http://sandlz.me/2016/07/17/AngularJs-Chart/</id>
    <published>2016-07-17T13:57:02.000Z</published>
    <updated>2016-09-22T08:26:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近相关项目需要用到图表，看了不少图表相关的东西，觉得Chart.js不错，能满足项目中的需求，特此记录一下~</p><p>AngularJs-Chart是对Chart.js的封装，方便在Ionic+Cordova这样的webapp中使用.<br>由于测试工程是在Ionic+Cordova环境下运行的，所以啰嗦2句这个框架.</p><h2 id="Ionic-Cordova-框架"><a href="#Ionic-Cordova-框架" class="headerlink" title="Ionic + Cordova 框架"></a>Ionic + Cordova 框架</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>Ionic 可以说是一个样式库，用来搭建我们的页面，针对移动应用做了很多优化，适合移动开发.<br>Cordova 提供了JS对访问移动平台Api的支持，支持调用手机的硬件，如摄像头、GPS等.</p></blockquote><ul><li>优势<ul><li>跨平台（一个WebView）</li><li>开发迅速、节省开发成本</li><li>Web开发人员也可开发移动应用</li></ul></li><li>劣势<ul><li>性能较原生APP有差距</li></ul></li></ul><a id="more"></a><h3 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h3><p>环境搭建:可参照辉哥大神写的<a href="http://devlu.me/2015/10/10/Mac%E4%B8%8BCordova-Ionic-AngularJs%E5%81%9A%E6%B7%B7%E5%90%88%E7%A7%BB%E5%8A%A8App%E5%BC%80%E5%8F%91%E4%B9%8B--%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">安装教程</a>;</p><p>入门:可参照<a href="http://cordova.apache.org/docs/en/latest/guide/overview/" target="_blank" rel="external">官方文档</a>或网络资料学习.</p><h2 id="新建测试工程"><a href="#新建测试工程" class="headerlink" title="新建测试工程"></a>新建测试工程</h2><p>关于新建一个工程可参照此<a href="http://jingyan.baidu.com/article/ff42efa93185c0c19e2202b1.html" target="_blank" rel="external">文章</a></p><p>这里我们选择一个简单的列表模板：sidemenu<br>使用IntelliJ IDEA打开工程，如下图所示：</p><div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/engine.png" width="430" height="230" alt="图片名称" align="center"><br></div><h3 id="引入必要文件"><a href="#引入必要文件" class="headerlink" title="引入必要文件"></a>引入必要文件</h3><p>打开index.html,在引入app.js的地方引入chart必须的文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- chart support --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"lib/chart/angular-chart.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"lib/chart/Chart.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"lib/chart/angular-chart.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><blockquote><p>由于Chart.js配置项较多，放置在Controller中代码过去臃肿，导致逻辑代码看起来较为混乱，so新建一个Service-用于处理chart的一些配置.</p></blockquote><ul><li>控制器(Controller)<ul><li>chartController</li></ul></li><li>服务(Service)<ul><li>ChartService</li></ul></li></ul><h2 id="工程地址"><a href="#工程地址" class="headerlink" title="工程地址"></a>工程地址</h2><p><a href="https://github.com/SandLZ/chartDemo" target="_blank" rel="external">chartDemo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近相关项目需要用到图表，看了不少图表相关的东西，觉得Chart.js不错，能满足项目中的需求，特此记录一下~&lt;/p&gt;
&lt;p&gt;AngularJs-Chart是对Chart.js的封装，方便在Ionic+Cordova这样的webapp中使用.&lt;br&gt;由于测试工程是在Ionic+Cordova环境下运行的，所以啰嗦2句这个框架.&lt;/p&gt;
&lt;h2 id=&quot;Ionic-Cordova-框架&quot;&gt;&lt;a href=&quot;#Ionic-Cordova-框架&quot; class=&quot;headerlink&quot; title=&quot;Ionic + Cordova 框架&quot;&gt;&lt;/a&gt;Ionic + Cordova 框架&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;Ionic 可以说是一个样式库，用来搭建我们的页面，针对移动应用做了很多优化，适合移动开发.&lt;br&gt;Cordova 提供了JS对访问移动平台Api的支持，支持调用手机的硬件，如摄像头、GPS等.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优势&lt;ul&gt;
&lt;li&gt;跨平台（一个WebView）&lt;/li&gt;
&lt;li&gt;开发迅速、节省开发成本&lt;/li&gt;
&lt;li&gt;Web开发人员也可开发移动应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劣势&lt;ul&gt;
&lt;li&gt;性能较原生APP有差距&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Cordova" scheme="http://sandlz.me/tags/Cordova/"/>
    
      <category term="WebApp" scheme="http://sandlz.me/tags/WebApp/"/>
    
      <category term="AngularJs" scheme="http://sandlz.me/tags/AngularJs/"/>
    
      <category term="Chart" scheme="http://sandlz.me/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://sandlz.me/2016/07/01/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://sandlz.me/2016/07/01/Linux常用命令/</id>
    <published>2016-07-01T03:18:43.000Z</published>
    <updated>2016-07-04T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><ul><li>touch a.txt<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3></li><li>rm a.txt<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3></li><li>cp a.txt /tmp/<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3></li><li>mv a.txt /home <h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><a id="more"></a><blockquote><p>find [路径] [参数]<br>参数说明：</p><ol><li>时间：<br>-atimen    :在 n<em>24小时内被 access 即存取过的文件列出来！<br>-ctimen    :在 n</em>24小时内被 changed 即改变、新增的文件或目录印出<br>-mtimen    :在 n*24小时内被 modified 即修改过的文件印出<br>-newer file :比 file 还要新的文件就列出来！<br>使用名称：<br>-gidn     :寻找 群组 ID 为 n 的文件<br>-group name :寻找群组名称为 name的文件<br>-uidn     :寻找拥有者 ID 为 n 的文件<br>-user name :寻找使用者名称为 name 的文件<br>-name file :寻找档名为 file 的文件名称（可以使用万用字符）<br>-type type :寻找档案属性为 type 的档案，type 包含了 b, c, d, p, l, s，这些与前一章的属性相同！例如 l 为 Link而 d 为路径之意！</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bestlinux ~]# find / -nametesting           //查找名为 testing  的文件</span><br><span class="line">[root@bestlinux ~]# find / -name&apos;test*&apos;         //查找以test开头的文件</span><br><span class="line">[root@bestlinux ~]# find . -ctime1                //查找当前目录下一天内新增的文件</span><br><span class="line">[root@bestlinux ~]# find /home -usertest      //查找 /home下拥有者为 test 的文件</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><ul><li>cat /etc/services</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;h3 id=&quot;新建&quot;&gt;&lt;a href=&quot;#新建&quot; class=&quot;headerlink&quot; title=&quot;新建&quot;&gt;&lt;/a&gt;新建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;touch a.txt&lt;h3 id=&quot;删除&quot;&gt;&lt;a href=&quot;#删除&quot; class=&quot;headerlink&quot; title=&quot;删除&quot;&gt;&lt;/a&gt;删除&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;rm a.txt&lt;h3 id=&quot;复制&quot;&gt;&lt;a href=&quot;#复制&quot; class=&quot;headerlink&quot; title=&quot;复制&quot;&gt;&lt;/a&gt;复制&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;cp a.txt /tmp/&lt;h3 id=&quot;移动&quot;&gt;&lt;a href=&quot;#移动&quot; class=&quot;headerlink&quot; title=&quot;移动&quot;&gt;&lt;/a&gt;移动&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;mv a.txt /home &lt;h3 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://sandlz.me/tags/Linux/"/>
    
      <category term="命令" scheme="http://sandlz.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>香蕉派折腾记</title>
    <link href="http://sandlz.me/2016/01/12/%E9%A6%99%E8%95%89%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>http://sandlz.me/2016/01/12/香蕉派折腾记/</id>
    <published>2016-01-12T01:40:48.000Z</published>
    <updated>2016-07-28T13:23:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.xiangjiaopro.com/" target="_blank" rel="external">香蕉派</a>(BananaPi)是类似于树莓派一样的卡片式微型计算机，可用于硬件控制、软件部署、多媒体播放等等用途.</p><p>到手bananapi pro也有一段时间了，最近正好有空，记录一下我走过的坑…</p><ul><li>安装准备</li><li>开始安装</li><li>连接网络</li><li>花生壳</li><li>迅雷离线</li><li>共享</li><li>开发环境</li><li>运行状态</li></ul><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>进入官网<a href="http://www.xiangjiaopro.com/Helps/jxwjpro.html" target="_blank" rel="external">下载</a>页面,有13个系统供我们选择，如下图所示：<br><a id="more"></a></p><div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/pi_download_index.png" width="350" height="303" alt="图片名称" align="center"><br></div><p>目前我试过2个系统：Android、Raspbian<br>有开发需求的建议安装Raspbian</p><ul><li><p>Android </p>  <blockquote><p>版本:4.4，是一个Android pad版本，分辨率经过测试支持1080P(默认)<br>支持wifi连接(稳定性欠佳)<br>此系统最大好处就是可以像使用手机一样安装App,比如我安装了全聚合App(非广告)，通过HDMI连接到显示器，像其他盒子一样可以看网络电视、视屏等.</p></blockquote></li><li><p>Raspbian</p>  <blockquote><p>基于Debian修改而来的Linux系统</p></blockquote></li></ul><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>官方提供了详细的安装操作系统的说明，点我<a href="http://www.xiangjiaopro.com/Helps/quickguide.html" target="_blank" rel="external">查看</a></p><h2 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h2><p>准备<br><blockquote><ul><li>有显示器<br>  打开控制台，输入ifconfig查看网络状况<br>  查看eth0 与 wlan0信息</li><li>无显示器<br>  计算机一台，通过远程的方式连接到香蕉派<br>  如：ssh bananapi@192.168.1.8</li></ul></blockquote></p><h3 id="网线"><a href="#网线" class="headerlink" title="网线"></a>网线</h3><p>通过网线方式连接的话，控制台ifconfig,eth0信息中是否有ip地址（没有的话检查网线连接、路由器地址过滤或地址绑定是否限制）</p><h3 id="Wifi"><a href="#Wifi" class="headerlink" title="Wifi"></a>Wifi</h3><p>如网线类似，查看wlan0信息（无waln0 ? 别急…这是一个坑,下面将具体介绍）</p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><h4 id="大坑记录"><a href="#大坑记录" class="headerlink" title="大坑记录"></a>大坑记录</h4><p>香蕉派默认没有开启wifi模块，需要手动开启…</p><p>开启方式(<a href="http://wiki.lemaker.org/BananaPro/Pi:WiFi_configuration" target="_blank" rel="external">官方文档</a>)：<br><blockquote><ul><li>加载wifi驱动<br>  sudo modprobe ap6210</li><li>查看所有驱动加载情况<br>  lsmod</li></ul><p>sudo modprobe ap6210 只是一次性的，重启后wifi并不会加载，所以我们要让他开机就加载wifi：</p><ul><li>编辑模块配置文件<br>  sudo nano /etc/modules</li><li>在底部添加一行<br>  ap6210</li><li>保存并退出</li></ul></blockquote></p><h4 id="修改网络配置文件"><a href="#修改网络配置文件" class="headerlink" title="修改网络配置文件"></a>修改网络配置文件</h4><p>通过编辑配置文件的方式，选择Dhcp或Static ip<br>网络配置文件地址：/etc/network/interfaces</p><ol><li>控制台执行：sudo nano /etc/network/interfaces</li><li><p>修改配置(静态ip方式，方便远程连接)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># eth0-有线</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.0.13</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.0.1</span><br><span class="line"># wlan0-无线</span><br><span class="line">#auto wlan0</span><br><span class="line">#allow-hotplug wlan0</span><br><span class="line">#iface wlan0 inet static</span><br><span class="line">#pre-up wpa_supplicant -B w -D wext -i wlan0 -c/etc/wpa.conf</span><br><span class="line">#post-down killall -q wpa_supplicant</span><br><span class="line">#address 192.168.0.12</span><br><span class="line">#netmask 255.255.255.0</span><br><span class="line">#gateway 192.168.0.1</span><br><span class="line"></span><br><span class="line">iface default inet dhcp</span><br></pre></td></tr></table></figure><p> 这里我没有使用wifi,注释了wifi配置，采用eth0</p></li></ol><h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p>花生壳是一个针对嵌入式设备而开发的控制软件，可以花生壳后台配置访问内网的设备，包括端口映射配置.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>下载<a href="http://hsk.oray.com/download/#type=http|shumeipai" target="_blank" rel="external">安装包</a></li><li>文件拷贝<br>通过u盘，或者ftp的方式将文件放置到香蕉派，解压缩<br>进入phddns2文件夹 cd phddns2<br>执行 ./oraynewph start</li><li>查看状态<br>oraynewph status<br>查看控制台信息，即可看到SN码，以及运行状态.<br><div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/oray_status.png" width="598" height="140" alt="图片名称" align="center"><br></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3></li><li>登录<a href="b.oray.com">花生壳后台管理</a><br>  输入SN码，首次密码：admin<br>  完成手机邮箱验证</li><li>绑定<br>  香蕉派需要绑定花生壳账号才能使用，所以还得注册一个花生壳账号以绑定香蕉派（如需使用内网穿透，须购买内网穿透）</li><li>配置<br>绑定后，新增、修改内网映射，即可通过你的花生壳域名来访问你的香蕉派服务<div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/net.jpeg" width="600" height="290" alt="图片名称" align="center"><br></div></li></ul><h2 id="迅雷离线"><a href="#迅雷离线" class="headerlink" title="迅雷离线"></a>迅雷离线</h2><p>为香蕉派增加离线下载功能</p><h3 id="安装迅雷离线固件"><a href="#安装迅雷离线固件" class="headerlink" title="安装迅雷离线固件"></a>安装迅雷离线固件</h3><ul><li>下载<br>  下载地址：<a href="http://pan.baidu.com/s/1kTCBZbL" target="_blank" rel="external">http://pan.baidu.com/s/1kTCBZbL</a> 提取码：qiq9</li><li>上传<br>  拷贝安装文件到香蕉派中，如~/home/bananapi/xunlei</li><li>解压缩<br>  unzip xxxx.zip</li><li>权限<br>  chmod 0777 * -R</li><li>运行<br>  ./portal<br>  获取到你的设备码</li><li>重启<br>  ./portal -s<br>  ./portal</li><li>迅雷远程<br>  <a href="http://yuancheng.xunlei.com/" target="_blank" rel="external">http://yuancheng.xunlei.com/</a><br>  输入之前的机器码<br>  <div align="center"><br><img src="http://7xsap2.com1.z0.glb.clouddn.com/%E8%BF%85%E9%9B%B7.png" width="550" height="270" alt="图片名称" align="center"><br></div><br>此时是无法下载的（没有挂在硬盘）</li></ul><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><blockquote><p>迅雷是检测挂载的磁盘来作为下载的目录。所以要保证几个事情，一是迅雷要具有写入权限； 二是必须要有挂载的磁盘，而且这个磁盘必须不是挂载到根目录的</p></blockquote><h2 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h2><h3 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h3><blockquote><p>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p></blockquote><ul><li>安装samba包</li></ul><p>sudo apt-get install samba samba-common-bin<br>sudo apt-get install netatalk （可选，用于支持AFP）<br>sudo apt-get install avahi-daemon（可选，用于支持网内的计算机自动发现）</p><ul><li>配置</li></ul><p>/etc/samba/smb.conf </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[public]</span><br><span class="line">comment = Public Storage</span><br><span class="line">path = /home/pi</span><br><span class="line">read only = no#任何人都具有了访问修改的权限</span><br><span class="line">#因为是公共文件夹，所以给了所有用户全部权限，可以自定义</span><br><span class="line">create mask = 0777#新创建文件的默认属性</span><br><span class="line">directory mask = 0777#新创建文件夹的默认属性</span><br><span class="line">guest ok = yes#默认的访问用户名为guest</span><br><span class="line">browseable = yes</span><br></pre></td></tr></table></figure><ul><li>用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | mksmbpasswd.sh &gt;/etc/samba/smbpasswd</span><br><span class="line">smbpasswd -a 用户名 添加用户</span><br><span class="line">smbpasswd -e 用户名 激活用户</span><br></pre></td></tr></table></figure><h3 id="DLNA"><a href="#DLNA" class="headerlink" title="DLNA"></a>DLNA</h3><blockquote><p>DLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。所以，其选择的各种技术和协议都是当前所应用很广泛的技术和协议。<br>DLNA将其整个应用规定成5个功能组件。从下到上依次为：网络互连，网络协议，媒体传输，设备的发现控制和管理，媒体格式。</p></blockquote><ul><li>安装<pre><code>sudo apt-get install minidlna</code></pre></li><li>配置<pre><code>/etc/minidlna.conf</code></pre></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件</span><br><span class="line">media_dir=A,/samba/DLNA/Music</span><br><span class="line">media_dir=P,/samba/DLNA/Picture</span><br><span class="line">media_dir=V,/samba/DLNA/Video</span><br><span class="line">#配置minidlna的数库数据的存放目录</span><br><span class="line">db_dir=/samba/DLNA/db</span><br><span class="line">#配置日志目录</span><br><span class="line">log_dir=/samba/DLNA/log</span><br></pre></td></tr></table></figure><p>确保目录存在且设置权限为可读写</p><ul><li><p>其他</p><ul><li>重启 minidlna<br>  /etc/init.d/minidlna restart</li><li>minidlna 随机启动<br> sudo update-rc.d minidlna defaults</li><li>停止 minidlna 服务<br>  sudo service minidlna stop</li><li>取消 minidlna 的开机自动启动<br>  sudo update-rc.d -f minidlna remove</li></ul></li><li><p>minidlna支持rm、rmvb<br>  参考:<a href="http://blog.csdn.net/haven200/article/details/43039261" target="_blank" rel="external">编译minidlna</a></p></li></ul><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><ul><li>安装<br>  apt-get install vsftpd</li><li>配置<br>  /etc/vsftpd.conf<ul><li>配置用户可以写权限：write_enable=YES</li><li>配置uMask：local_umask=022（默认为077，该种方式不支持断点续传，修改为022）</li><li>禁止匿名用户登录：anonymous_enable=NO</li><li>限制用户访问配置以外的路径：chroot_local_user=YES（这个配置是限制全部用户的，也可以限制部分用户）</li><li>配置用户的Home目录：local_root=/application/search/test</li></ul></li><li>重启<br>  service vsftpd restart</li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h2 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h2><p>获取香蕉派的cpu、内存等使用情况</p><ul><li>建立脚本<br>  nano get.py</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"> </span><br><span class="line"># Return CPU temperature as a character string                                     </span><br><span class="line">def getCPUtemperature():</span><br><span class="line">    res = os.popen(&apos;vcgencmd measure_temp&apos;).readline()</span><br><span class="line">    return(res.replace(&quot;temp=&quot;,&quot;&quot;).replace(&quot;&apos;C\n&quot;,&quot;&quot;))</span><br><span class="line"> </span><br><span class="line"># Return RAM information (unit=kb) in a list                                      </span><br><span class="line"># Index 0: total RAM                                                              </span><br><span class="line"># Index 1: used RAM                                                                </span><br><span class="line"># Index 2: free RAM                                                                </span><br><span class="line">def getRAMinfo():</span><br><span class="line">    p = os.popen(&apos;free&apos;)</span><br><span class="line">    i = 0</span><br><span class="line">    while 1:</span><br><span class="line">        i = i + 1</span><br><span class="line">        line = p.readline()</span><br><span class="line">        if i==2:</span><br><span class="line">            return(line.split()[1:4])</span><br><span class="line"> </span><br><span class="line"># Return % of CPU used by user as a character string                               </span><br><span class="line">def getCPUuse():</span><br><span class="line">    return(str(os.popen(&quot;top -n1 | awk &apos;/Cpu\(s\):/ &#123;print $2&#125;&apos;&quot;).readline().strip()))</span><br><span class="line"> </span><br><span class="line"># Return information about disk space as a list (unit included)                    </span><br><span class="line"># Index 0: total disk space                                                        </span><br><span class="line"># Index 1: used disk space                                                        </span><br><span class="line"># Index 2: remaining disk space                                                    </span><br><span class="line"># Index 3: percentage of disk used                                                 </span><br><span class="line">def getDiskSpace():</span><br><span class="line">    p = os.popen(&quot;df -h /&quot;)</span><br><span class="line">    i = 0</span><br><span class="line">    while 1:</span><br><span class="line">        i = i +1</span><br><span class="line">        line = p.readline()</span><br><span class="line">        if i==2:</span><br><span class="line">            return(line.split()[1:5])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># CPU informatiom</span><br><span class="line">CPU_temp = getCPUtemperature()</span><br><span class="line">CPU_usage = getCPUuse()</span><br><span class="line"> </span><br><span class="line"># RAM information</span><br><span class="line"># Output is in kb, here I convert it in Mb for readability</span><br><span class="line">RAM_stats = getRAMinfo()</span><br><span class="line">RAM_total = round(int(RAM_stats[0]) / 1000,1)</span><br><span class="line">RAM_used = round(int(RAM_stats[1]) / 1000,1)</span><br><span class="line">RAM_free = round(int(RAM_stats[2]) / 1000,1)</span><br><span class="line"> </span><br><span class="line"># Disk information</span><br><span class="line">DISK_stats = getDiskSpace()</span><br><span class="line">DISK_total = DISK_stats[0]</span><br><span class="line">DISK_used = DISK_stats[1]</span><br><span class="line">DISK_perc = DISK_stats[3]</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&apos;&apos;)</span><br><span class="line">    print(&apos;CPU Temperature = &apos;+CPU_temp)</span><br><span class="line">    print(&apos;CPU Use = &apos;+CPU_usage)</span><br><span class="line">    print(&apos;&apos;)</span><br><span class="line">    print(&apos;RAM Total = &apos;+str(RAM_total)+&apos; MB&apos;)</span><br><span class="line">    print(&apos;RAM Used = &apos;+str(RAM_used)+&apos; MB&apos;)</span><br><span class="line">    print(&apos;RAM Free = &apos;+str(RAM_free)+&apos; MB&apos;)</span><br><span class="line">    print(&apos;&apos;) </span><br><span class="line">    print(&apos;DISK Total Space = &apos;+str(DISK_total)+&apos;B&apos;)</span><br><span class="line">    print(&apos;DISK Used Space = &apos;+str(DISK_used)+&apos;B&apos;)</span><br><span class="line">    print(&apos;DISK Used Percentage = &apos;+str(DISK_perc))</span><br></pre></td></tr></table></figure><ul><li>执行脚本<br>  python get.py</li></ul><p>参考：</p><ol><li><a href="http://jianfeihit.iteye.com/blog/1820413" target="_blank" rel="external">FTP</a></li><li><a href="http://shumeipai.nxez.com/2013/08/24/install-nas-on-raspberrypi.html" target="_blank" rel="external">SAMBA</a></li><li><a href="http://shumeipai.nxez.com/2015/07/12/raspberry-pi-install-dlna-streaming-media-server.html?variant=zh-cn" target="_blank" rel="external">MINIDLNA</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.xiangjiaopro.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;香蕉派&lt;/a&gt;(BananaPi)是类似于树莓派一样的卡片式微型计算机，可用于硬件控制、软件部署、多媒体播放等等用途.&lt;/p&gt;
&lt;p&gt;到手bananapi pro也有一段时间了，最近正好有空，记录一下我走过的坑…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装准备&lt;/li&gt;
&lt;li&gt;开始安装&lt;/li&gt;
&lt;li&gt;连接网络&lt;/li&gt;
&lt;li&gt;花生壳&lt;/li&gt;
&lt;li&gt;迅雷离线&lt;/li&gt;
&lt;li&gt;共享&lt;/li&gt;
&lt;li&gt;开发环境&lt;/li&gt;
&lt;li&gt;运行状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装准备&quot;&gt;&lt;a href=&quot;#安装准备&quot; class=&quot;headerlink&quot; title=&quot;安装准备&quot;&gt;&lt;/a&gt;安装准备&lt;/h2&gt;&lt;p&gt;进入官网&lt;a href=&quot;http://www.xiangjiaopro.com/Helps/jxwjpro.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载&lt;/a&gt;页面,有13个系统供我们选择，如下图所示：&lt;br&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="香蕉派" scheme="http://sandlz.me/tags/%E9%A6%99%E8%95%89%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Ios-创建Framework</title>
    <link href="http://sandlz.me/2015/11/30/ios-%E5%88%9B%E5%BB%BAFramework/"/>
    <id>http://sandlz.me/2015/11/30/ios-创建Framework/</id>
    <published>2015-11-30T11:49:15.000Z</published>
    <updated>2016-06-30T04:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h2><ol><li>mac os x 10.11.1</li><li>xcode 7.1.1</li></ol><hr><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><ul><li>在实际开发过程中，我们经常会封装一些组件。那么，如何提高开发效率，不必每次都引入大量的文件呢？答案显然易见，那就是打成framework或者.a包.</li><li>本篇将详细介绍如何将封装后的代码制作成framework.</li></ul><h3 id="framework是啥？"><a href="#framework是啥？" class="headerlink" title="framework是啥？"></a>framework是啥？</h3><ul><li>framework是一系列资源的集合，Xcode可以方便的将这些文件编译到你的项目中去</li></ul><a id="more"></a><h2 id="开始建立Framework"><a href="#开始建立Framework" class="headerlink" title="开始建立Framework"></a>开始建立Framework</h2><h3 id="创建一个Framework"><a href="#创建一个Framework" class="headerlink" title="创建一个Framework"></a>创建一个Framework</h3><div align="center"><br><img src="http://img.blog.csdn.net/20151130184513678" width="430" height="300" alt="图片名称" align="center"><br></div><h3 id="建立一个简单的类，用于打印信息"><a href="#建立一个简单的类，用于打印信息" class="headerlink" title="建立一个简单的类，用于打印信息"></a>建立一个简单的类，用于打印信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface SayHello : NSObject</span><br><span class="line">- (void)sayHello;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;SayHello.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation SayHello</span><br><span class="line">- (void)sayHello&#123;</span><br><span class="line">    NSLog(@&quot;Hello,Framework.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="暴露头文件（你想让别人看到的）"><a href="#暴露头文件（你想让别人看到的）" class="headerlink" title="暴露头文件（你想让别人看到的）"></a>暴露头文件（你想让别人看到的）</h3><p> 选中工程-&gt;Build Phases-&gt;Headers,将头文件拖拽至Public中<br> <div align="center"><br><img src="http://img.blog.csdn.net/20151130190739092" width="300" height="200" alt="图片名称" align="center"><br></div></p><h3 id="多平台Framework支持"><a href="#多平台Framework支持" class="headerlink" title="多平台Framework支持"></a>多平台Framework支持</h3><p>1.新建一个Aggregate(集合)<br>         New-&gt;Target-&gt;Aggregate</p><div align="center"><br><img src="http://img.blog.csdn.net/20151130191243618" width="300" height="200" alt="图片名称" align="center"><br></div><p>2.新建一个脚本</p><div align="center"><br><img src="http://img.blog.csdn.net/20151130191445925" width="400" height="160" alt="图片名称" align="center"><br></div><p>3.在脚本中键入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Sets the target folders and the final framework product.</span><br><span class="line"># 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME</span><br><span class="line"># 例如: FMK_NAME = &quot;MyFramework&quot;</span><br><span class="line">FMK_NAME=$&#123;PROJECT_NAME&#125;</span><br><span class="line"># Install dir will be the final output to the framework.</span><br><span class="line"># The following line create it in the root folder of the current project.</span><br><span class="line">INSTALL_DIR=$&#123;SRCROOT&#125;/Products/$&#123;FMK_NAME&#125;.framework</span><br><span class="line"># Working dir will be deleted after the framework creation.</span><br><span class="line">WRK_DIR=build</span><br><span class="line">DEVICE_DIR=$&#123;WRK_DIR&#125;/Release-iphoneos/$&#123;FMK_NAME&#125;.framework</span><br><span class="line">SIMULATOR_DIR=$&#123;WRK_DIR&#125;/Release-iphonesimulator/$&#123;FMK_NAME&#125;.framework</span><br><span class="line"># -configuration $&#123;CONFIGURATION&#125;</span><br><span class="line"># Clean and Building both architectures.</span><br><span class="line">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphoneos clean build</span><br><span class="line">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphonesimulator clean build</span><br><span class="line"># Cleaning the oldest.</span><br><span class="line">if [ -d &quot;$&#123;INSTALL_DIR&#125;&quot; ]</span><br><span class="line">then</span><br><span class="line">rm -rf &quot;$&#123;INSTALL_DIR&#125;&quot;</span><br><span class="line">fi</span><br><span class="line">mkdir -p &quot;$&#123;INSTALL_DIR&#125;&quot;</span><br><span class="line">cp -R &quot;$&#123;DEVICE_DIR&#125;/&quot; &quot;$&#123;INSTALL_DIR&#125;/&quot;</span><br><span class="line"># Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.</span><br><span class="line">lipo -create &quot;$&#123;DEVICE_DIR&#125;/$&#123;FMK_NAME&#125;&quot; &quot;$&#123;SIMULATOR_DIR&#125;/$&#123;FMK_NAME&#125;&quot; -output &quot;$&#123;INSTALL_DIR&#125;/$&#123;FMK_NAME&#125;&quot;</span><br><span class="line">rm -r &quot;$&#123;WRK_DIR&#125;&quot;</span><br><span class="line">open &quot;$&#123;INSTALL_DIR&#125;&quot;</span><br></pre></td></tr></table></figure><p>此段脚本将为我们合并多平台的framework，用于支持模拟器与真机.</p><p>注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i386: 32位模拟器</span><br><span class="line">x86_64: 64为模拟器</span><br><span class="line">arm7: 在最老的支持iOS7的设备</span><br><span class="line">arm7s: 在iPhone5和5C上使用</span><br><span class="line">arm64: 运行于iPhone5S的64位ARM处理器</span><br></pre></td></tr></table></figure><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>选中Aggregate,Command + B编译工程</p> <div align="center"><br><img src="http://img.blog.csdn.net/20151130192041319" width="400" height="200" alt="图片名称" align="center"><br></div><p>编译完成后，会自动打开编译完成的文件夹，Framework就在那里.<br> <div align="center"><br><img src="http://img.blog.csdn.net/20151130192308943" width="400" height="200" alt="图片名称" align="center"><br></div></p><p>快捷键：Command + 上（回到上级目录）</p><p>终于看到Framework啦~</p><h3 id="检测多平台支持"><a href="#检测多平台支持" class="headerlink" title="检测多平台支持"></a>检测多平台支持</h3><p>进入Framework目录：cd framework目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info /目录/FrameworkTest.framework/FrameworkTest</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Architectures in the fat file: FrameworkTest.framework/FrameworkTest are: i386 x86_64 armv7 arm64</span><br></pre></td></tr></table></figure></p><p>竟然不支持armv7s，别急，有办法！</p><p>选中工程-&gt;BuildSetting 添加一条<br> <div align="center"><br><img src="http://img.blog.csdn.net/20151130193329635" width="300" height="200" alt="图片名称" align="center"><br></div></p> <div align="center"><br><img src="http://img.blog.csdn.net/20151130193232641" width="330" height="170" alt="图片名称" align="center"><br></div><p>再次编译，检查，Bingo~</p><hr><h2 id="整合到项目中"><a href="#整合到项目中" class="headerlink" title="整合到项目中"></a>整合到项目中</h2><p>第一步</p><ul><li>将生成的framework Add到你的项目中去</li><li>检查framework是否添加到项目中（Build Phases-Link Binary）</li></ul><p>第二步</p><ul><li><p>在工程中引入头文件</p><p><code>#import &lt;FrameworkTest/SayHello.h&gt;</code></p></li></ul><p>第三步</p><ul><li><p>使用你的framework,测试打印信息</p><p><code>SayHello *hello = [[SayHello alloc] init]; [hello sayHello];</code></p></li></ul><p>控制台打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2015-11-30 19:04:15.819 TeamTest03[14443:330569] Hello,Framework.</span><br></pre></td></tr></table></figure><p>大功告成~</p><p>注：可能遇到的问题</p><ol><li>运行时报错：image not found<br>问题描述：找不到framework,framework没有拷贝到app中<br> 解决：选中工程-&gt;Build Phases-&gt;加号-&gt;New Copy File Phase  <div align="center"><br><img src="http://img.blog.csdn.net/20151130194553221" width="350" height="150" alt="图片名称" align="center"><br></div></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发环境：&quot;&gt;&lt;a href=&quot;#开发环境：&quot; class=&quot;headerlink&quot; title=&quot;开发环境：&quot;&gt;&lt;/a&gt;开发环境：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;mac os x 10.11.1&lt;/li&gt;
&lt;li&gt;xcode 7.1.1&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;简述：&quot;&gt;&lt;a href=&quot;#简述：&quot; class=&quot;headerlink&quot; title=&quot;简述：&quot;&gt;&lt;/a&gt;简述：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在实际开发过程中，我们经常会封装一些组件。那么，如何提高开发效率，不必每次都引入大量的文件呢？答案显然易见，那就是打成framework或者.a包.&lt;/li&gt;
&lt;li&gt;本篇将详细介绍如何将封装后的代码制作成framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;framework是啥？&quot;&gt;&lt;a href=&quot;#framework是啥？&quot; class=&quot;headerlink&quot; title=&quot;framework是啥？&quot;&gt;&lt;/a&gt;framework是啥？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;framework是一系列资源的集合，Xcode可以方便的将这些文件编译到你的项目中去&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="ios" scheme="http://sandlz.me/tags/ios/"/>
    
      <category term="framework" scheme="http://sandlz.me/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="http://sandlz.me/2015/10/03/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://sandlz.me/2015/10/03/Hexo常用命令/</id>
    <published>2015-10-03T02:24:15.000Z</published>
    <updated>2017-03-25T10:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>正式开始使用Hexo + Github来写博客啦，这两天终于大概配置好页面了，还差一些优化，比如百度抓取…</p><p>下面记录一些常用的命令</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><blockquote><p>新建文章：layout默认post，文件地址(yourblog/source/_post)<br>新建页面：文件地址(yourblog/source/pagename)</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建文章:  hexo new [layout] &lt;title&gt;</span><br><span class="line">新建页面:  hexo new page &lt;pagename&gt;</span><br></pre></td></tr></table></figure><h3 id="生成与发布"><a href="#生成与发布" class="headerlink" title="生成与发布"></a>生成与发布</h3><blockquote><p>生成：生成静态页面html到public目录<br>发布：.deploy到Github<br>发布前须确认_cinfig_yml中配置了deploy的地址.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo generate // 生成</span><br><span class="line">hexo deploy  // 发布</span><br><span class="line">----</span><br><span class="line">hexo generate --watch // 文件变化状况</span><br><span class="line">// 生成后发布</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><h3 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h3><p>提高效率，啦啦啦…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n // hexo new</span><br><span class="line">hexo g // hexo generate</span><br><span class="line">hexo s // hexo server</span><br><span class="line">hexo d // hexo deploy</span><br><span class="line">hexo g -d // hexo generate &amp; deploy</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正式开始使用Hexo + Github来写博客啦，这两天终于大概配置好页面了，还差一些优化，比如百度抓取…&lt;/p&gt;
&lt;p&gt;下面记录一些常用的命令&lt;/p&gt;
&lt;h2 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h2&gt;&lt;h3 id=&quot;新建&quot;&gt;&lt;a href=&quot;#新建&quot; class=&quot;headerlink&quot; title=&quot;新建&quot;&gt;&lt;/a&gt;新建&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;新建文章：layout默认post，文件地址(yourblog/source/_post)&lt;br&gt;新建页面：文件地址(yourblog/source/pagename)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="IT" scheme="http://sandlz.me/categories/IT/"/>
    
    
      <category term="Hexo" scheme="http://sandlz.me/tags/Hexo/"/>
    
  </entry>
  
</feed>

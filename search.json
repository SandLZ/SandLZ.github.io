[{"title":"Ionic多视图","url":"/2017/03/27/Ionic多视图/","content":"\n使用场景：\n\t一个MainView容器中 包含多个子View, MainView中包含公共view,相对来说是全局的。\n\t如：一个自定义的侧边栏菜单,在每个页面都显示。\n\n<!-- more -->\n\n## 要点\nangular-ui-router（ionic.bundle.js 已包含）\n\n[Api](https://ui-router.github.io/ng1/docs/0.3.1/index.html)\n\n## 示例\n需求：\n\n1. 首页需要显示自定义侧边栏，要求一直显示，通过导航栏上的菜单按钮控制打开或关闭；\n2. 通过侧边栏菜单点击切换当前显示的View\n\n## 思路\n- 确定变与不变\n- 不变的菜单栏放在哪？\n- 变得放在哪？\n\n## 方案\n\n1. View层级关系\n\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/pad_side.jpeg\" width = \"600\" height = \"433\" alt=\"图片名称\" align=center />\n</div>\n\n如上图所示，右侧边栏可通过导航栏右侧按钮打开和缩小(非关闭不显示);\n容器位置则是变化的页面。\n\n2. 路由设置\n\n\t```\n\t$stateProvider\n    .state('login',{\n      url: '/login',\n      templateUrl: 'templates/login.html',\n      controller: 'UserCtrl'\n    })\n    .state('main',{\n      url: '/main',\n      cache: true,\n      templateUrl: 'templates/main.html',\n      controller: 'MainCtrl'\n    })\n    .state('main.news', {\n      url: '/news',\n      templateUrl: 'templates/news.html',\n      controller: 'NewsCtrl'\n    })\n    .state('main.photo', {\n      url: '/photo',\n      templateUrl: 'templates/photo.html',\n      controller: 'PhotoCtrl'\n    });\n  $urlRouterProvider.otherwise(\"/main\");\n\t```\n\t路由规则：\n\t- 首先访问 main\n\t- main 下包含news,photo页面(可多个)\n3. 加载内部页面\n\n\t```\n\t<div ui-view></div>\n\t```\n\t\n## 参考资料\n[angular-ui-router 多视图views](http://blog.csdn.net/ligang2585116/article/details/50380343)\n\n\n\n\t\n\t\n\t\n","tags":["ui-router"],"categories":["IT"]},{"title":"MySQL恢复数据","url":"/2017/02/08/MySQL恢复数据/","content":"\n   前几天由于一些原因，导致本机MySQL挂了，一气之下打算重新安装，但是本地数据库里还存了一些比较重要的资料，就找到这个表所在的文件夹，保存了一份(还好保存了...)\n   屋漏偏逢连夜雨，Apple ID密码忘了，恢复秘钥存在数据库里...这下完蛋了，修改密码必须要这个秘钥。\n   于是这两天有空就搞这个东西,花了不少时间,在这记录一下！\n   \n   <!-- more -->\n   \n## 恢复数据的前提\n\n{% blockquote %}\n\t必须满足以下几个条件：\n\tfrm 用于 恢复表结构\n\tibd 用于 恢复数据\n\t表名 新建表\n{% endblockquote %}\n\n- 表结构\n- 表名\n- frm(恢复表结构)\n- ibd(用于恢复数据)\n\n## 恢复环境\n\n- OSX 10.12.3\n- MySQL 5.7.17\n\n## 恢复\n\n这里分为2种情况：\n注意：表名一定要一致！！！\n\n### 有表结构\n\n1. 建立一个数据库 (mydb)\n2. 根据表结构建立表 (mytable)\n3. 执行下面语句，用于关闭 tableNameSpace\n\n\t```\n\tALTER TABLE mydb.mytable DISCARD TABLESPACE;\n\t```\n4. 关闭数据库\n5. 拷贝要恢复的 ibd 文件 至 mydb 文件夹中\n6. 修改刚刚复制过去的ibd权限 (_mysql 可读写)\n7. 开启数据库\n8. 执行下面语句，用于打开 tableNameSpace\n\t\n\t```\n\tALTER TABLE mydb.mytable IMPORT TABLESPACE;\n\t```\n9. 若出错，检查第8步\n10. 执行查询语句         -- SUCCESS!\n\n### 无表结构，有frm\n\n1. 建立一个数据库 (mydb)\n2. 根据表结构建立表 (mytable)\n3. 随意建几个字段（最好能记得有几个字段）\n4. 关闭数据库\n5. 替换 frm 文件 至 新建立的数据库文件夹 \n6. 修改 my.cnf(Mac:/etc Win: C:\\Program Data) 添加\n\t\n\t```\n\tinnodb_force_recovery = 6\n\t```\n\t\n7. 开启数据库\n8. 提示：mytable 不存在 -> 查看LOG 确定 字段个数，并修改表（改好后重复4-7操作）\n9. 获得表结构\n10. 参考 有表结构 操作\n\n\n\n\n\n\n【参考文献】\n\n[1. Recover MySQL database from data folder without ibdata1 from ibd files](http://dba.stackexchange.com/questions/57120/recover-mysql-database-from-data-folder-without-ibdata1-from-ibd-files/142836)\n\n[2. 表结构](http://blog.csdn.net/hi__study/article/details/53489672)\n\n\n\n\n\n\n   \n","tags":["恢复"],"categories":["IT"]},{"title":"DBLite数据库","url":"/2017/01/02/DBLite数据库/","content":"\n\nSqlite orm.\nIt'refer to swyouflf's xutils, thank swyouflf's offertory.\n\nIt’s an android sqlite orm framework, and help developers easy to operate database.\n\n\n\n<!-- more -->\n\n## ScreenShot\n\n<div>    \n<img align=\"left\" src=\"http://7xsap2.com1.z0.glb.clouddn.com/dblite_add.png\" width = \"423\" height = \"702\" />\n<img align=\"right\" src=\"http://7xsap2.com1.z0.glb.clouddn.com/dblite_delete.png\" width = \"423\" height = \"702\" />\n</div>\n<div>    \n<img align=\"left\" src=\"http://7xsap2.com1.z0.glb.clouddn.com/dblite_update.png\" width = \"423\" height = \"702\"  />\n<img align=\"right\" src=\"http://7xsap2.com1.z0.glb.clouddn.com/dblite_query.png\" width = \"423\" height = \"702\" />\n</div>\n\n## 配置\n\n### Gradle\n\n```\ncompile 'me.sandlz:dblite:1.0.2'\n```\n\n### Application\n在自定义Application里调用\n\n```\n// 初始化数据库\nDbLite.init(this,false);\n```\n\n### 创建DBHelper类\n\n```\n/**\n * 获取db的实例\n * @return\n */\npublic static DBHelper2 getInstance() {\n    if(appContext==null){\n       throw new RuntimeException(\"请先在程序入口处初始化，调用init(ApplicationContext)\");\n    }\n    if (instance == null) {\n        instance = new DBHelper2();\n        File dbFile=new File(\"/sdcard/sandlz\");\n        if(!dbFile.exists()){\n            dbFile.mkdirs();\n        }\n\n       DbManager.DaoConfig daoConfig = new DbManager.DaoConfig()\n                .setDbName(\"test.sqlite.db\")\n                // 不设置dbDir时, 默认存储在app的私有目录.\n                .setDbDir(new File(\"/sdcard/sandlz\"))\n                .setDbVersion(1)\n                .setDbOpenListener(new DbManager.DbOpenListener() {\n                    @Override\n                    public void onDbOpened(DbManager db) {\n                        // 开启WAL, 对写入加速提升巨大\n                        db.getDatabase().enableWriteAheadLogging();\n                    }\n                })\n                .setDbUpgradeListener(new DbManager.DbUpgradeListener() {\n                    @Override\n                    public void onUpgrade(DbManager db, int oldVersion, int newVersion) {\n                        // TODO: 可执行一些操作 如删除、更新表等\n                        // db.addColumn(...);\n                        // db.dropTable(...);\n                        // ...\n                        // or\n                        // db.dropDb();\n                    }\n                });\n        try {\n            instance.db = DbLite.getDb(daoConfig);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    return instance;\n}\n```\n\n\n在合适的地方调用\n\n```\n// this这里是在Application\nDBHelper2.init(this);\n```\n\n## 使用\n\n新增Dao操作类，对外提供增删改查方法，具体可根据需求修改，选择效率最高的方式(请在子线程调用dao方法，防止阻塞主线程，影响用户体验！！！)\n\n最好设置主键，提高操作效率.\n\n### 新建实体类\n\n{% codeblock lang:java %}\n@Table(name = \"User\")\npublic class User {\n\n    @Column(name = \"userId\" ,isId = true, autoGen = false)// 数据库字段设置\n    @SerializedName(\"Id\")// Gson解析\n    private String userId;\n\n    @Column(name = \"age\")\n    private int age;\n\n    @Column(name = \"name\")\n    private String name;\n\n    public User() {\n\n    }\n{% endcodeblock %}\n\n### 基础\n\n#### 增\n\n{% codeblock lang:java %}\npublic void addUser(User user) {\n        if (null == user) {\n            return;\n        }\n        try {\n            DBHelper2.getInstance().getDb().saveOrUpdate(user);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    public void addUser(List<User> users) {\n        if (null == users) {\n            return;\n        }\n        try {\n            DBHelper2.getInstance().getDb().saveOrUpdate(users);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n    }\n    \n{% endcodeblock %}\n\n#### 删\n\n{% codeblock lang:java %}\npublic void deleteUser(User user) {\n        if (null == user) {\n            return;\n        }\n        try {\n            DBHelper2.getInstance().getDb().delete(user);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public void deleteUser(List<User> users) {\n        if (null == users) {\n            return;\n        }\n        try {\n            DBHelper2.getInstance().getDb().delete(users);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    public void deleteAllUser() {\n        try {\n            DBHelper2.getInstance().getDb().delete(User.class);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n    }\n    \n{% endcodeblock %}\n\n#### 改\n\n{% codeblock lang:java %}\npublic void updateUser(User user) {\n        if (null == user) {\n            return;\n        }\n        try {\n            DBHelper2.getInstance().getDb().update(user);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public void updateUser(List<User> users) {\n        if (null == users) {\n            return;\n        }\n        try {\n            DBHelper2.getInstance().getDb().update(users);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n    }\n    \n{% endcodeblock %}\n\n#### 查\n\n{% codeblock lang:java %}\npublic User queryUser(String userId) {\n        if (null == userId) {\n            return null;\n        }\n        User user = null;\n        try {\n            List<User> users = DBHelper2.getInstance().getDb()\n                    .selector(User.class)\n                    .where(\"userId\",\"=\",userId)\n                    .findAll();\n            if (null != users && users.size() > 0) {\n                user = users.get(0);\n            }\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n        return user;\n    }\n\n    public List<User> queryAllUsers() {\n        List<User> users = null;\n        try {\n            users = DBHelper2.getInstance().getDb().findAll(User.class);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n        return users;\n    }\n    \n{% endcodeblock %}\n\n### 高级\n\n\n\n","tags":["ORM"],"categories":["IT"]},{"title":"RecyclerView实战","url":"/2016/11/22/RecyclerView实战/","content":"\n[BaseRecyclerViewAdapterHelper](https://github.com/CymChad/BaseRecyclerViewAdapterHelper)是一个很强的RecyclerView适配器，针对以往大量的adapter代码做了大量优化.\n\n收集部分优秀的RecyclerViewAdapter文章：\n\n - 腾讯Bugly [ListView 与 RecyclerView 对比浅析](http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653578065&idx=2&sn=25e64a8bb7b5934cf0ce2e49549a80d6&chksm=84b3b156b3c43840061c28869671da915a25cf3be54891f040a3532e1bb17f9d32e244b79e3f&scene=4#wechat_redirect)\n - BRVAH [RecyclerView优秀文集](https://github.com/CymChad/CymChad.github.io)\n\n<!-- more -->\n\n## 为什么使用RecyclerView?\n\n- 支持多种布局\n- 复杂数据、快速滑动\n- API友好\n\n## 为什么使用它？\n\n- 优化Adapter代码（减少百分之70%代码）\n- 添加点击item点击、长按事件、以及item子控件的点击事件\n- 添加加载动画（一行代码轻松切换5种默认动画）\n- 添加头部、尾部、下拉刷新、上拉加载（感觉又回到ListView时代）\n- 设置自定义的加载更多布局\n- 添加分组（随心定义分组头部）\n- 自定义不同的item类型（简单配置、无需重写额外方法）\n- 设置空布局（比Listview的setEmptyView还要好用！）\n- 添加拖拽item\n\n(以上摘自BaseRecyclerViewAdapterHelper)\n\n## 使用\n\n### 添加到工程\n项目根目录build.gradle \n\n```\nallprojects {\n    repositories {\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n\n```\n\napp目录下build.gradle\n\n```\ndependencies {\n    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:v2.6.1'\n}\n```\n\n### 示例\n\n项目地址：[ChatUIDemo](https://github.com/SandLZ/ChatUIDemo)\n\n下面展示一些示例：\n\n- 多布局聊天页\n- 搜索高亮\n- 下拉刷新、上拉加载更多 \n\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/chat.gif\" width = \"399\" height = \"633\" alt=\"图片名称\" align=left />\n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/pull_refresh.gif\" width = \"633\" height = \"399\" alt=\"图片名称\" align=center />\n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/highLight.gif\" width = \"399\" height = \"633\" alt=\"图片名称\" align=right />\n</div>\n\n\n### 示例-聊天页\n\n#### 添加依赖\n\n- appcompat-v7\n- recyclerview\n- xutils 工具合集\n- BaseRecyclerViewAdapterHelper 适配器\n- glide 图片框架\n- glide-transformations 变换\n\n```\ncompile 'com.android.support:appcompat-v7:23.3.0'\ncompile 'com.android.support:recyclerview-v7:23.3.0'\ncompile 'org.xutils:xutils:3.3.38'\ncompile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.6.1'\ncompile 'com.github.bumptech.glide:glide:3.7.0'\ncompile 'jp.wasabeef:glide-transformations:2.0.1'\n```\n\n#### 新建items\n定义消息的类型，包含哪些内容(页面所需数据)\n\nChatMutiItems 继承自 MultiItemEntity\n并实现 getItemType() 方法.\n\n代码片段：\n\n{% codeblock lang:java %}\npublic static final int TEXT = 1;\n    public static final int TEXT_O = 2;\n    public static final int IMAGE = 3;\n    public static final int IMAGE_O = 4;\n    // 公用\n    private String userName;\n    private String userHeadUrl;\n    private long   receiverTime;\n    // 文本\n    private String content;\n    // 图片\n    private String imageUrl;\n    private int itemType;\n    private int spanSize;\n    \n{% endcodeblock %}\n\n#### 新建Adapter\nChatAdapter 继承自 BaseMultiItemQuickAdapter\n\n这里需传入items类和BaseViewHolder.\n\nBaseViewHolder 是viewHolder基类，封装了一些常用方法，提高开发效率.\n\n构造方法：\n需 指定要展示哪些类型的布局\n\n{% codeblock lang:java %}\npublic ChatAdapter(Context context, List<ChatMutiItems> data) {\n    super(data);\n    mContext = context;\n    // 设定可能需要展示的ItemType\n    addItemType(ChatMutiItems.TEXT, R.layout.item_text_view);\n    addItemType(ChatMutiItems.TEXT_O, R.layout.item_text_view_o);\n    addItemType(ChatMutiItems.IMAGE, R.layout.item_img_view);\n    addItemType(ChatMutiItems.IMAGE_O, R.layout.item_img_view_o);\n}\n{% endcodeblock %}\nAdapter具体用法下面将详细描述.\n\n#### RecyclerView绑定Adapter\n\n- 设定布局方式\n流式布局（默认垂直滚动）\n\n{% codeblock lang:java %}\nfinal GridLayoutManager manager = new GridLayoutManager(this, 1);\nrecyclerView.setLayoutManager(manager);\n{% endcodeblock %}\n\n- 绑定Adapter\n\n{% codeblock lang:java %}\nrecyclerView.setAdapter(chatAdapter);\n{% endcodeblock %}\n\n#### Adapter\n\n##### convert()方法\n\n{% codeblock lang:java %}\nprotected void convert(BaseViewHolder holder, ChatMutiItems item) {\n}\n{% endcodeblock %}\nholder - 对应页面中的每个Item（相当于ListView中的ConvertView）\nitem   - 数据(相当于ListView中的data.get(i))\n\n较ListViewAdapter优势：\n\n- 无需烦心view复用问题\n\n##### 设置数据\n\n可直接调用BaseViewHolder 提供的方法进行设置.\n\n{% codeblock lang:java %}\nholder.setText(R.id.item_text_username,item.getUserName());\n{% endcodeblock %}\n查看源码可知，BaseViewHolder帮我们做了转换与设置.\n\nBaseViewHolder没有提供的方法怎么办？\n\n通过holder.getView()方法绑定控件\n\n{% codeblock lang:java %}\n(ImageView) holder.getView(R.id.item_text_headurl)\n{% endcodeblock %}\n\n##### 点击事件与回调处理\n\nAdapter作为View层，负责展示数据，不应该在此处理点击事件或其他业务操作逻辑，将复杂的逻辑放置Controller层或Manager层.\n\n- 点击事件\n\t\n\t{% codeblock lang:java %}\n\t// 添加点击事件\n   holder.addOnClickListener(R.id.item_text_content);\n\t```\n\tController\n\t\n\t```\n\trecyclerView.addOnItemTouchListener(new OnItemClickListener() {\n        @Override\n        public void SimpleOnItemClick(BaseQuickAdapter baseQuickAdapter, View view, int i) {\n            Log.d(\"zliu\",\"SimpleOnItemClick - \" + view.getId());\n        }\n\n        @Override\n        public void onItemChildClick(BaseQuickAdapter adapter, View view, int position) {\n            super.onItemChildClick(adapter, view, position);\n            Log.d(\"zliu\",\"onItemChildClick- id - \"+view.getId());\n        }\n      });\n\t{% endcodeblock %}\n\n- 特殊回调\n\n\t如文件下载进度，应通过局部刷新实现，在下载进度中刷新view.\n\t\n\t```\n\tchatAdapter.notifyItemChanged(position);\n\t```\n\n\n### 示例-高亮搜索\n\n需求：模仿QQ搜索聊天记录\n实现思路：\n\n1. 高亮某关键字，即设置高亮色，通过SpannableStringBuilder完成\n2. 子线程循坏数据，拿到设置SpannableStringBuilder后的数据\n3. 更新页面\n\n部分代码：\n\n1. 设置高亮字体\n{% codeblock lang:java %}\n\nprivate SpannableStringBuilder getStyle(int color,String content, String key) {\n    SpannableStringBuilder style = new SpannableStringBuilder(content);\n    int fstart = content.indexOf(key);\n    int fend   = fstart+key.length();\n    style.setSpan(new ForegroundColorSpan(color),fstart,fend, Spannable.SPAN_EXCLUSIVE_INCLUSIVE);\n        return style;\n    }\n{% endcodeblock %}\n\n2. 循环后台返回的数据\n{% codeblock lang:java %}\n\npublic List<SearchMsgEntity> getSearchReuslt(String key) {\n    List<SearchMsgEntity> results = new ArrayList<>();\n    List<SearchMsgEntity> source = getFakeData();\n    for (SearchMsgEntity s : source) {\n        if (s.getName().contains(key)) {\n            s.setNameStyle(getStyle(Color.BLUE,s.getName(),key));\n            results.add(s);\n        }\n        if (s.getContent().contains(key)) {\n            s.setContentStyle(getStyle(Color.BLUE,s.getContent(),key);                \t\t\t  results.add(s);\n           }\n        }\n        return results;\n    }\n{% endcodeblock %}\n\n3. 页面更新\n{% codeblock lang:java %}\n\nprivate void search(View view) {\n     if (et_text.getText().toString().length() == 0) {\n        return;\n     }\n    // 提示框\n    btn_search.setText(\"获取中...\");\n    Log.d(\"zliu\",\"开始计算时间：- \"+System.currentTimeMillis());\n    Thread thread = new Thread(){\n        @Override\n        public void run() {\n            super.run();\n            try {\n                // 模拟网络请求\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                     e.printStackTrace();\n            }\n            List<SearchMsgEntity> results = dataManager.getSearchReuslt(et_text.getText().toString());\n            Message message = new Message();\n            message.obj = results;\n            mHandler.sendMessage(message);\n        }\n    };\n    thread.start();\n}\n\nprivate Handler mHandler = new Handler(){\n    @Override\n    public void handleMessage(Message msg) {\n        super.handleMessage(msg);\n        btn_search.setText(\"搜索\");\n        adapter.setNewData((List<SearchMsgEntity>)msg.obj);\n        Log.d(\"zliu\",\"设置完数据时间：- \"+System.currentTimeMillis());\n    }\n};\n{% endcodeblock %}\n\n4. adapter 设置数据\n{% codeblock lang:java %}\n\n@Override\nprotected void convert(BaseViewHolder holder, SearchMsgEntity item) {\n    if (null == item.getNameStyle()) {\n        holder.setText(R.id.search_name,item.getName());\n    }else {\n        holder.setText(R.id.search_name,item.getNameStyle());\n    }\n    if (null == item.getContentStyle()) {\n        holder.setText(R.id.search_content,item.getContent());\n     }else {\n        holder.setText(R.id.search_content,item.getContentStyle());\n    }\n}\n{% endcodeblock %}\n\n\n### 示例-下拉刷新、加载更多\n\n由于BaseRecyclerViewAdapterHelper只提供了上拉加载更多(可自定义)，并且官方的下拉刷新自定义差，无法满足我们的需求，所以使用自定义的RecylcerView完成下拉刷新.\n\n1. 自定义刷新布局\n2. activity加载刷新布局\n3. 刷新逻辑控制\n\n代码很简单，参考PullRefreshLoadMoreActivity.\n\n\n项目地址：[ChatUIDemo](https://github.com/SandLZ/ChatUIDemo)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n","tags":["IM"],"categories":["IT"]},{"title":"Android优秀开源项目及学习资料汇总","url":"/2016/10/21/Android优秀开源项目及学习资料汇总/","content":"\n{% blockquote %}\n更新时间：2016-10-21 15:01:30\n{% endblockquote %}\n\n## Awesome\n包含平台、编程语言、前端、后端、大数据、理论、书籍、编辑器、开发环境、数据库、多媒体、学习、安全、娱乐、游戏等.\n[Awesome资源汇总](https://github.com/sindresorhus/awesome)\n\n<!-- more -->\n\n## 优秀开源项目\n\n### Awesome-Android\n\n包含模拟器、资源库、资源、性能等.\n[Awesome-Android](https://github.com/JStumpp/awesome-android)\n\n## 学习资料\n\n### RxJava\n[RxJava文档](https://github.com/mcxiaoke/RxDocs)\n\n\n","tags":["学习资料"],"categories":["IT"]},{"title":"Cordova-Plugin开发汇总","url":"/2016/10/19/Cordova-Plugin开发汇总/","content":"\n## Cordova-Plugin\n官方插件检索：[cordova-plugin](http://cordova.apache.org/plugins/)\n\n## 为什么开发插件？\n\n对于webApp来说，处理一些简单的页面是没有问题的，性能接近于原生；但对于复杂的功能，比如说流媒体播放、复杂的控件、数据库操作、文件操作等复杂的功能时，我们就需要调用原生的代码来完成.\nIonic-Framework为我们提供了插件的方式来实现JS调用原生代码.\n\n## 新建插件\n\n新建插件这里就不再叙述了，详细的可以参考我写的[入门示例](https://github.com/SandLZ/myFirstPlugin),\n包含了新建、安装、测试.\n\n<!-- more -->\n\n## 问题汇总\n\n### 常规\n\n### Ios\n\n#### 全屏\n\nxxx.plist\n\n```oc\nView controller-based status bar appearance NO\n```\n\nconreoller\n\n```oc\n// 显示/隐藏StatusBar\n- (void)hideStatusBar{\n    _isHideBar = YES;\n    [self setNeedsStatusBarAppearanceUpdate];\n}\n\n- (void)showStatusBar{\n    _isHideBar = NO;\n    [self setNeedsStatusBarAppearanceUpdate];\n}\n- (BOOL)prefersStatusBarHidden\n{\n    return _isHideBar;\n}\n```\n\n\n### Android\n\n#### 资源文件的使用\n\n在对android插件开发时，我们不能像平时开发Android应用程序时直接使用 R.id.my_txt,那为什么不能这样用呢？\n\n首先，R.java是我们android工程自动问我们生成的，里面包含drawable、layout、string、attr等，在我们添加资源文件或声明控件时，会自动为我们生成一个int值.\n\n其次，我们编写插件时，是不会有这个R.java文件的，工程也不会为我们生成ID，只有当我们安装插件到项目工程时才会生成对应的id.\n\n如何解决？\n\n我们新建一个FakeR.java文件\n\n```java\npublic class FakeR {\n\tprivate Context context;\n\tprivate String packageName;\n\n\tpublic FakeR(Activity activity) {\n\t\tcontext = activity.getApplicationContext();\n\t\tpackageName = context.getPackageName();\n\t}\n\n\tpublic FakeR(Context context) {\n\t\tthis.context = context;\n\t\tpackageName = context.getPackageName();\n\t}\n\n\tpublic int getId(String group, String key) {\n\t\treturn context.getResources().getIdentifier(key, group, packageName);\n\t}\n\n\tpublic static int getId(Context context, String group, String key) {\n\t\treturn context.getResources().getIdentifier(key, group, context.getPackageName());\n\t}\n}\n```\n一眼就看明白了，这个类为我们提供了某资源对应的ID，只需传入id及对应的组别就行.\n\n如:new FakeR().getId(\"id\",\"my_txt\")\n\n遇到styleable时如何处理？\n\nattrs.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n\n    <declare-styleable name=\"NumberPicker\">\n        <attr name=\"textColor\" format=\"color\" />\n        <attr name=\"textSize\" format=\"float|dimension\" />\n        <attr name=\"startNumber\" format=\"integer\" />\n        <attr name=\"endNumber\" format=\"integer\" />\n        <attr name=\"currentNumber\" format=\"integer\" />\n        <attr name=\"verticalSpacing\" format=\"dimension\" />\n        <attr name=\"flagText\" format=\"string|reference\" />\n        <attr name=\"flagTextSize\" format=\"dimension\" />\n        <attr name=\"flagTextColor\" format=\"color\" />\n        <attr name=\"backgroundColor\" format=\"color\" />\n        <attr name=\"rowNumber\" format=\"integer\" />\n    </declare-styleable>\n\n</resources>\n\n```\njava代码中\n\n```java\nint attrId = context.getResources().getIdentifier(\"textColor\", \"attr\", context.getPackageName());\nfinal TypedArray a = context.obtainStyledAttributes(attrs, new int[]{attrId}, defStyleAttr, 0);\nmTextColor = a.getColor(fakeR.getId(\"styleable\",\"NumberPicker_textColor\"), DEFAULT_TEXT_COLOR);\n```\n\n\n\n","tags":["插件"],"categories":["IT"]},{"title":"MVP + RxJava + Retrofit + Dagger2 FrameWork","url":"/2016/09/28/MVP + RxJava + Retrofit + Dagger2 FrameWork/","content":"\n## Dagger2\n依赖注入(Dependency Injection)框架\n","tags":["FrameWork"]},{"title":"Android 开发基础","url":"/2016/09/27/Android 开发基础/","content":"\nEnvironment: Mac + Android Studio(2.2) \n\n## You need konw\n\n- Gradle\n- SDK Tools\n- Build Tools\n- Platforms Tools\n- Support Library\n- NDK\n\n<!-- more -->\n\n\n### Gradle\n\n#### 简介\n[Gradle](https://gradle.org/)是新一代的自动化构建工具,是独立的工具，与Android Studio无关.\n其他构建工具还有Ant、Maven(采用xml)，较为臃肿;\nGradle 采用的是一种叫做 Groovy 的语言，语法跟 Java 语法很像，但是是一种动态语言，而且在 Java 基础上做了不少改进，用起来更加简洁、灵活，而且 Gradle 完全兼容 Maven、Ivy\n\n#### 背景\n{% blockquote %}\nGoogle 在推出 AS 的时候选中了 Gradle 作为构建工具，为了支持 Gradle 能在 AS 上使用，Google 做了个 AS 的插件叫 Android Gradle Plugin，所以我们能在 AS 上使用 Gradle 完全是因为这个插件的原因.\n{% endblockquote %}\n\n\n#### gradle plugin\n\n在项目的根目录有个 build.gradle 文件中，有这样一行代码：\n\n```\nclasspath 'com.android.tools.build:gradle:2.1.0'\n```\n这个就是依赖 gradle 插件的代码,版本号表示android gradle plugin 的版本，而不是gradle的版本\ngradle 插件版本变化：[new-build-system](http://tools.android.com/tech-docs/new-build-system)\n\n#### Gradle Wrapper\n\n概念：Gradle Wrapper翻译过来就是 Gradle 的包装.\n{% blockquote %}\n假设我们本地有多个项目，一个是比较老的项目，还用着 Gradle 1.0 的版本，一个是比较新的项目用了 Gradle 2.0 的版本，但是你两个项目肯定都想要同时运行的，如果你只装了 Gradle 1.0 的话那肯定不行，所以为了解决这个问题，Google 推出了 Gradle Wrapper 的概念，就是他在你每个项目都配置了一个指定版本的 Gradle ，你可以理解为每个 Android 项目本地都有一个小型的 Gradle ，通过这个每个项目你可以支持用不同版本的 Gradle 来构建项目。\n{% endblockquote %}\n\ngradle-wrapper.properties\n{% codeblock lang:gradle %}\n#Mon Sep 26 10:57:22 CST 2016\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip\n{% endcodeblock %}\n\n声明了 gradle 的目录与下载路径以及当前项目使用的 gradle 版本\n\n\n#### gradlew命令\n\n常用的命令\n\n- ./gradlew -v\t版本\n- ./gradlew clean 清除build文件夹\n- ./gradlew build  检查依赖并编译打包（debug、release）\n- ./gradlew assembleDebug 编译并打Debug包\n- ./gradlew assembleRelease 编译并打Release的包\n\n\n\n#### build.gradle\n\n如下图所示，有多个gradle文件\n\n<div style=\"width:50%\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/gw.png\" width = \"50%\"/>\n</div>\n\nModule:app、arms、rxerrorhandler\n每个Module都有一个build.gradle文件（apply plugin: 'com.android.library'）\n工程：3、4、5\n3:默认的内容就是声明了 android gradle plugin 的版本.\n5:这个文件是全局的项目配置文件，里面主要声明一些需要加入 gradle 的 module\n\n{% codeblock lang:gradle %}\ninclude ':app', ':arms', ':rxerrorhandler'\n{% endcodeblock %}\n\n\n看一下项目的根build.gradle\n{% codeblock lang:gradle %}\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n\n    defaultConfig {\n        applicationId \"me.sandlz.rxjavademo\"\n        minSdkVersion 17\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n\t}\n{% endcodeblock %}\n\nandroid节点\n\n- compileSdkVersion \n\t编译sdk版本(建议采用高版本 - API变化)\n- buildToolsVersion\n\t编译tools版本\n- minSdkVersion\n\t最低兼容版本\n- targetSdkVersion\n\t目标sdk版本\n\n\n\n### SDK Manager\n\n先来一张图感受一下开发中所需的工具（图片来自网络）.\n<div style=\"width:80%\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/sdk_manager2.png\" width = \"50%\"/>\n</div>\n\n#### SDK Tools\n\nAndroid sdk tools 开发工具集,包含开发中常用的工具，比如logcat,traceview,sqlite3等.\n路径：yourSdkPath/tools\n<div style=\"width:50%\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/sdk_tools.png\" width = \"50%\"/>\n</div>\n\n\n#### SDK Build Tools\n\nAndroid项目构建工具\n路径：yourSdkPath/build-tools\n\n#### SDK Platforms Tools\n\nsdk platforms也是提供各种工具的，有adb,aapt,aidl等.\n路径：yourSdkPath/platform-tools\n\n#### SDK Platfrom\n\n对应平台的开发工具，需要在哪个版本的平台下开发就下载哪个(可多个)\n路径：yourSdkPath/platforms\n\n#### SDK Support Library\n\n在低版本平台实现高版本平台控件效果时提供支持\n路径：yourSdkPath/extras/android/m2repository/com/android\n下图红色箭头标注了一些常用的包\n<div style=\"width:70%\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/support_library.png\" width = \"50%\"/>\n</div>\n\n\n#### Android Support Repository\n\n方便在gradle中使用Android Support Libraries，因为Google并没有把这些库发布到maven center或者jcenter去，而是使用了Google自己的maven仓库\n路径：yourSdkPath/extras/android/support\n\n\n\n\n### NDK\n\n\n参考文献：\n[Gradle普及](http://gold.xitu.io/entry/5778f8bd165abd0054b443b0/promote?utm_source=baidu&utm_medium=keyword&utm_content=android_gradle&utm_campaign=q3_search)\n\n\n\n\n\n\n","tags":["Android Studio"],"categories":["IT"]},{"title":"RxJava学习笔记(一) - 基础篇","url":"/2016/08/18/RxJava学习笔记(一)-基础/","content":"\n## RxJava 简介\n### 什么是RxJava?\n\nRxJava 是一个响应式编程框架，由 Netflix 开发的响应式扩展（Reactive Extensions）的Java实现,是一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库.\n\n### 能为开发者带来(做)什么？\n特点\n\n- 简洁、简洁、简洁\n\n随着业务逻辑的复杂，代码的可读性逐渐降低，RxJava相比较于AsyncTask、Handler等让异步代码更为简洁.\n<!-- more -->\n\n做什么？\n- 异步操作\n\t- 网络访问(搭配Retrofit更佳)\n\t- 数据库的读写\n\t- 大图片的载入\n\t- 文件压缩/解压\n- 绑定事件(需RxBinding)\n- RxBus(事件总线)\n\t- 代替[EventBus](http://blog.csdn.net/harvic880925/article/details/40660137)\n\n注：若是第一次使用RxJava或想使用RxJava，推荐阅读扔物线的[给 Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)\n\n## 引入到项目中\n\n首先，我们需要添加如下依赖：\nrxandroid是针对Android平台的扩展 \n{% codeblock lang:gradle %}\ncompile 'io.reactivex:rxjava:1.1.8'\ncompile 'io.reactivex:rxandroid:1.2.1'\n{% endcodeblock %}\n## 如何使用？\n\nRxJava 的观察者模式，包含四个基本概念：\n\n- Observable(被观察者)\n- Observer(观察者)\n- subscribe(订阅)\n- Event(事件)\n简述：Observable发出事件，Observer处理事件，通过subscribe()实现两者的订阅。\n\n这些概念可能比较模式，不太容易理解，还是通过代码来解释吧~\n## 编写Hello world\n{% blockquote %}\n要求：在页面上显示Hello world\n{% endblockquote %}\n此例仅用于说明其用法，在实际开发中并无实际意义.\n\n实现1：\n{% codeblock lang:java %}\n// 利用Observable 发出事件\nObservable<List<String>> observable = Observable.create(new Observable.OnSubscribe<List<String>>() {\n        @Override\n        public void call(Subscriber<? super List<String>> subscriber) {\n            List<String> list = new ArrayList<String>();\n                for (int i = 0; i < 4; i++) {\n                    list.add(\"hello world \"+i);\n                }\n                subscriber.onNext(list);\n            }\n        });\n// Observer 处理事件\nObserver<List<String>> observer= new Observer<List<String>>() {\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(List<String> strings) {\n                mvpView.callBackGetDataResult(strings);\n            }\n        };\n// 或者使用Subscriber 处理事件\nSubscriber<List<String>> subscriber = new Subscriber<List<String>>() {\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(List<String> s) {\n                mvpView.callBackGetDataResult(s);\n            }\n        };\n// 订阅\nobservable.subscribe(observer);\n{% endcodeblock %}\n\n{% blockquote %}\nRxJava 还内置了一个实现了 Observer 的抽象类：Subscriber\nSubscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的.\nObserver 在subscribe()中最终会被转换成Subscriber对象，所以建议使用Subscriber对象.\n{% endblockquote %}\n区别：Subscriber\n\n- onStart()\n\t在 subscribe 刚开始，而事件还未发送之前被调用\n- unsubscribe()\n\t用于取消订阅，防止内存泄漏\n\n解析：\n当Observable被订阅时，Observable的call()方法会被调用，事件序列就会依次触发；subscriber.onNext(list)：被观察者调用了观察者的回调方法，实现了由被观察者向观察者的事件传递。\nobservable.subscribe(observer);返回Subscription 方便unsubscribe();\n\n上面的create()方法是 RxJava 最基本的创造事件序列的方法,基于这个，RxJava 还提供了一些快捷的创建事件的方法，如just(T),from(T[]) / from(Iterable<? extends T>),将传入的数组或 Iterable 拆分成具体对象后，依次发送出来.\n下面就实现一下这种简便的方式\n\n实现2：\n\n{% codeblock lang:java %}\nList<String> list = new ArrayList();\nfor (int i = 0; i < 4; i++) {\n    list.add(\"hello world \"+i);\n    }\nObservable.just(list)\n        .subscribeOn(Schedulers.computation())// 计算线程\n        .observeOn(AndroidSchedulers.mainThread())// 回调主线程\n        .subscribe(new Action1<List<String>>() {\n            @Override\n            public void call(List<String> s) {\n                mvpView.callBackGetDataResult(s);\n            }\n        });\n{% endcodeblock %}\n\n解析：\n\n1. 如 1-5 行代码所示，可以简便的发出事件.\n2. Action1<T>是什么？\n\tRxJava 提供了多个ActionX的接口，用于包装不同的无返回值的方法.\n\tsubscribe时自动创建 Subscriber ，并使用 new 出来的Action1<T> 来定义 onNext()详情见下面的subscribe方法（官方）\n{% codeblock lang:java %}\npublic final Subscription subscribe(final Action1<? super T> onNext) {\n        if (onNext == null) {\n            throw new IllegalArgumentException(\"onNext can not be null\");\n        }\n\n        Action1<Throwable> onError = InternalObservableUtils.ERROR_NOT_IMPLEMENTED;\n        Action0 onCompleted = Actions.empty();\n        return subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));\n}\n{% endcodeblock %}\n\n\n此时，读者可能要问了 subscribeOn()、observeOn是什么鬼？\n别急，下面一一解释.\n\n## 线程调度器（Schedulers）\n\n{% blockquote %}\n在不指定线程的情况下，RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler（调度器）.\n{% endblockquote %}\n\n内置的Schedulers：\n\n- Schedulers.immediate():直接在当前线程运行（默认）\n- Schedulers.newThread():新的线程\n- Schedulers.io():I/O 操作（文件、数据库、网络请求等）\n- Schedulers.computation():计算\n\n另外，Android本身提供一种：AndroidSchedulers.mainThread()\n\n上面使用的subscribeOn()、observeOn(）分别对应subscribe() 所发生的线程(事件产生的线程)、事件消费的线程.\n\n有了线程调度器，我们就无需写冗长的新建线程代码了~\n\n好了，到这里相信大家对Rxjava的使用和优势有了一定的认识，下面会继续学习其他的一些特性，更好的开发App...\n\n## 参考资料\n\n[给 Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)\n\n[深入浅出RxJava](http://blog.csdn.net/lzyzsd/article/details/41833541)\n","tags":["RxJava"],"categories":["IT"]},{"title":"Android之MVP","url":"/2016/08/17/Android之MVP/","content":"\n## 设计模式\n\n### 为什么使用MVP?\n\n在Android中，允许View和其它线程共存于Activity内。其实最大的问题莫过于在Activity中同时存在业务逻辑和UI逻辑,使得Activity变得很臃肿，这会增加测试和维护的成本。\n因此产生了MVP、MVVM等设计模式。\n\n### 什么是MVP？\n\nMVP 对应的是Model、View和Presenter.\n- MODEL\n\t数据层（网络数据、本地数据库等）\n- VIEW\n\t视图层（视图展示、用户事件）\n- PRESENTER\n\t桥梁/适配器（VIEW - MODEL）\n\t\n<!-- more -->\n下图是MVP架构的模式之一\nView - 视图层\nPresenter - View与Model之间的适配器\nModel - 数据层，包含数据的获取或存储及实体类等\n\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/mvp.png\" width = \"430\" height = \"328\" alt=\"图片名称\" align=center />\n</div>\n\n注：高层接口不能，不应该，并且必须不了解底层接口的细节，是（面向）抽象的，并且是细节隐藏的.\n\n### 优缺点分析\n\n优点\n\n- 层次清晰\n- 耦合度低\n- 维护性高\n\n缺点\n\n- 可能产生额外的学习成本 (活到老学到老,不是么~)\n\n## 推荐的设计模式\n\n下面推荐使用的一种设计模式，如下图所示：\n\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/app_stream.png\" width = \"430\" height = \"328\" alt=\"图片名称\" align=center />\n</div>\n\nView 、 Presenter层职责清晰，用于页面的处理；\nDataManager用于数据的获取\n\n## 参考资料\n\n[android-boilerplate](https://github.com/ribot/android-boilerplate)","tags":["设计模式"],"categories":["IT"]},{"title":"Git命令","url":"/2016/08/15/Git命令/","content":"\n## 简介\nGit是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。\n分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。\n## 安装\nMac \n\n- Homebrew安装\n\tbrew install git \n- Xcode安装\n\t安装Command line tools\n\t\n<!-- more -->\n\n## 建立本地仓库\n在任意文件夹下，如/Users/xxx/Documents/studyGit\n\n1. 打开终端\n\tcd 指定的目录\n2. 建立仓库\n\tgit init\n3. 添加文件\n\tgit add xxx\n4. 提交\n\tgit commit -m \"xxx\"\n\t\n## 版本控制\n1. 查看状态\n\tgit status\n2. 查看区别\n\tgit diff\n### 版本回退\n1. 查看提交历史\n\tgit log\n\t确定回退到哪个版本\n2. 退回上个版本\n\tgit reset --hard HEAD^\n\tHEAD^代表上一个版本，HEAD^^以此类推 HEAD~100\n3. 根据commit id\n\tgit reset --hard 3628164\n4. 查看命令历史\n\tgit reflog\n\t确定要回到未来的哪个版本\n\t\n### 放弃修改\n1. 放弃修改\n\t- git checkout -- xxx\n\t\n### 删除\n1. 删除版本库中文件\n\t- git rm xxx git commit -m \"xxx\"\n2. 误删回退\n\t- git checkout -- xxx\n\t\n## 远程仓库\n1. 添加远程库\n\t- 登录Github，新建一个仓库并命名\n\t- git remote add origin git@github.com:SandLZ/xxx.git(本地仓库关联到远程仓库)\n\t- 推送到远程仓库 git push -u origin master（first time）\n\t- git push origin master(other time)\n2. 从远程库Clone\n\t- 登录Github，新建一个仓库并命名\n\t- Clone git clone git@github.com:SandLZ/xxx.git\n\t\n### 分支管理\n分支可用于项目的版本迭代管理，例如创建一个dev分支.\n\n### 新建分支\n1. 创建分支\n\t- git branch dev\n2. 切换分支\n\t- git checkout dev\n3. 创建并切换\n\t- git checkout -b dev\n4. 查看当前分支（当前分支以 * 标识）\n\t- git branch\n\n### 合并分支\n1. 切换到master分支\n\t- git checkout master\n2. 合并到master分支\n\t- git merge dev\n\n### 删除分支\n1. git branch -d dev\n\n参考资料\n[Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n","tags":["git"],"categories":["IT"]},{"title":"WebApp开发常见问题汇总","url":"/2016/07/28/WebApp开发常见问题汇总/","content":"\n## 缓存\n\n{% blockquote %}\n问题描述：\n首先是页面构成\n目前有3个页面：首页（A）、统计信息（B）、详情（C）\nB页面有B1、B2两个tab页组成;\nC页面即详情页面（B跳转）\n问题：\nA->B->C 当由C返回B时，我们希望保留B的状态，于是设置了B页面的缓存为true(cache: true);\n此时，问题来了...\n继续返回到A时，再次进入B，还是保留在B的原状态.原因就是设置了缓存...\n而我们想要的是每次进入B，都是最新的数据和状态，即B1\n\n{% endblockquote %}\n\n<!-- more -->\n\n<div style=\"width:50%\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/B.png\" width = \"10%\" height = \"20%\" alt=\"图片名称\" align=\"left\"/>\n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/C.png\" width = \"10%\" height = \"20%\" alt=\"图片名称\"/>\n</div>\n\n解决方案：\n在首页，清除缓存-每次进入B即最新B1\n\n{% codeblock lang:js %}\n$ionicHistory.clearCache();\n{% endcodeblock %}\n\n参考：[view cache](http://stackoverflow.com/questions/28676631/is-it-possible-to-clear-the-view-cache-in-ionic)\n\n\n## $ionicPopup弹出框\n\n{% blockquote %}\n基本使用：[$ionicPopup](http://www.ionic.wang/js_doc-index-id-52.html)\n问题描述：点击页面空白部分，关闭弹出框\n{% endblockquote %}\n\n解决方案：\n新建ClosePopupService.js\n{% codeblock lang:js %}\nangular.module('myApp.services')\n  .factory('ClosePopupService', function($document, $ionicPopup, $timeout){\n  var lastPopup;\n  return {\n    register: function(popup) {\n      $timeout(function(){\n        var element = $ionicPopup._popupStack.length>0 ? $ionicPopup._popupStack[0].element : null;\n        if(!element || !popup || !popup.close) return;\n        element = element && element.children ? angular.element(element.children()[0]) : null;\n        lastPopup  = popup;\n        var insideClickHandler = function(event){\n          event.stopPropagation();\n        };\n        var outsideHandler = function() {\n          popup.close();\n        };\n        element.on('click', insideClickHandler);\n        $document.on('click', outsideHandler);\n        popup.then(function(){\n          lastPopup = null;\n          element.off('click', insideClickHandler);\n          $document.off('click', outsideHandler);\n        });\n      });\n    },\n    closeActivePopup: function(){\n      if(lastPopup) {\n        $timeout(lastPopup.close);\n        return lastPopup;\n      }\n    }\n  };\n})\n{% endcodeblock %}\n控制器中：\n{% codeblock lang:js %}\n$scope.show = function (placeId) {\n      $scope.detail = {name:\"test\"};\n      var popupConfig = {\n        templateUrl:'templates/popview.html',\n        title: $scope.detail.name,\n        scope: $scope\n      };\n      var popup = $ionicPopup.show(popupConfig);\n      ClosePopupService.register(popup);\n    };\n{% endcodeblock %}\n\n","tags":["常见问题"],"categories":["IT"]},{"title":"Android 开发常见问题汇总","url":"/2016/07/26/Android 开发常见问题汇总/","content":"\n## 前言\nAndroid 开发过程中难免遇到错误和一些奇怪的现象，一般来说，基本上都是我们的程序写的不够完善.\n\n现在的异常越多-以后的BUG越少\n\n下面记录一些我遇到的异常、错误情况，不定期更新~\n<!-- more -->\n\n## 分类\n包含功能上出现的bug、代码质量较差引起的Exception等.\n\n### Function\n\n#### Map<> 字典数据不一致\n描述：将一组数据存入Map<String,String>,Map<String,String> testMap = new HashMap();\nAndroid 5.0及以上系统与以下取出的数据不一致.\n原因：大致判断为HashMap() API变化导致.查看官方文档，果然是...\n解决方案：\n使用TreeMap()\nHashMap：适用于在Map中插入、删除和定位元素\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)\n参考：[Android 5.0之后对HashMap的修改](http://www.2cto.com/kf/201507/421405.html)\n\n#### 拍照后Activity重新进入（页面重新加载）\n描述：在App中，一般会使用到拍照上传功能.使用了一个临时(多张照片)的全局变量存储照片地址，发现拍照完成后，页面数据重置了...\n原因：拍照过程中，我们会改变手机的方向，即横拍与竖拍.导致Activity监测到旋转，重新计算内容大小，onCreate()\n解决方案：AndroidManifest.xml中，对应的Activity 添加如下配置\n```\nandroid:configChanges=\"orientation|screenSize\"\n```\n如需处理旋转事件：重写onConfigurationChanged()\n\n\n### Exception\n\n#### NullPointer\n描述：空指针异常，是很常见的错误.\n原因：访问某个Null对象\n解决方案：使用前加判断\n\n#### IndexOutOfBounds\n描述：数组访问越界.\n原因：访问某个超出数组大小的数组元素\n解决方案：使用前加判断访问的下标是否超出数组大小\n\n#### is not translated in \"af\" (Afrikaans)...\n\n描述：打包时报错\n原因：多语言\n解决方案：对应文件-resources节点增加\n\n```xml\ntools:ignore=\"MissingTranslation\"\n```","tags":["技巧"],"categories":["IT"]},{"title":"IonicFramework 之 Hybrid App开发","url":"/2016/07/25/IonicFramework之Hybrid App开发/","content":"\n## 简介\nIonic(ionicframework)一款接近原生的Html5移动App开发框架,主要有以下特点：\n\n- UI组件丰富\n- 性能较强\n- 开发周期短\n- web技术\n\n<!-- more -->\n\n## 安装\n\n### Node.js\n\n官网下载并安装[Node.js](https://nodejs.org/en/download/)\n更换npm(node package manager)的源\n\n```\n#先移除之前的源，因为国内访问比较慢或者访问不了\ngem sources --remove https://rubygems.org/\n#添加淘宝的镜像源\ngem sources -a http://ruby.taobao.org/\n#查看一下有没有更新成功\ngem sources -l\n```\n\n### Cordova\nApache Cordova 提供用 Javascript 访问移动平台的 API ,\n实际应用中，通过插件的方式来调用原生移动平台的Api.\n\n```\nnpm install -g cordova\n```\n### Ionic\nionic是什么？\n\nIonic(ionicframework)一款开源的Html5移动App开发框架,是AngularJS移动端解决方案,Ionic以流行的跨平台移动app开发框架phoengap/Cordova为蓝本，让开发者可以通过命令行工具快速生成android  ios移动app应用.\n\n```\nnpm install -g ionic\n```\n\n### IDE\n\n推荐使用 [IntelliJ IDEA](https://www.jetbrains.com/idea/)\n\n常用插件：\n\n- ionic\n- cordova\n- markdown\n\n## 常用命令\n\n```\n# 构建所有平台代码\nionic build\n# 构建Android\nionic build android\n# 构建ios 模拟器\nionic build ios\n# 构建ios 设备\nionic build --device ios\n# 运行app到设备上\nionic run --device ios/android\n# 运行在模拟器上（android genymotion 请用--device）\nionic run --emulate ios/android\n\n# 开启本地浏览器调试\nionic serve\n# 添加ios平台\nionic platform add ios\n# 移除android平台\nionic platform remove android\n# 安装插件 xxx可以为id，目录，url\ncordova plugin add xxx\n# 移除插件 xxx只能为插件id\ncordova plugin remove xxxx\n```\n\n## 示例工程\n\n工程地址：[myApp](https://github.com/SandLZ/myApp.git)\n\n插件地址：[myFirstPlugin](https://github.com/SandLZ/myFirstPlugin.git)\n\n### 设计模式\n\nMVC设计模式\n\n模块:\n\n模块可以说是AngularJS 的根本。它包含配置、控制、过滤、工厂模式、指令及其它模块.\n\n- module 应用开发模块\n- controller 控制器\n- scope 为视图提供绑定数据\n- filter 数据传输到视图之前修改数据\n- directive 可复用的UI元素\n- factory、service 为其他模块元素提供服务\n\n<br>\n\n----------------------\n<br>\n\n### 开发流程\n#### 新建工程\n打开终端\n\n```\nionic start myApp sidemenu\n```\nsidemenu是ionic 提供的模板，其他模板包括：\n\nblank ................ A blank starter project for Ionic\n\ncomplex-list ......... A complex list starter template\n\nmaps ................. An Ionic starter project using Google Maps and a side menu\n\nsalesforce ........... A starter project for Ionic and Salesforce\n\nsidemenu ............. A starting project for Ionic using a side menu with navigation in the content area\n\ntabs ................. A starting project for Ionic using a simple tabbed interface\n\ntests ................ A test of different kinds of page navigation\n\n控制台会输出一下信息：\n<div width=\"50%\">\n<img src=\"ScreenShots/myApp.png\"\nstyle=\"width:60%\">\n</img>\n</div>\n\n#### 添加平台支持\n新建工程时，会默认的添加ios平台.\n\n如需添加其他平台：\n\n```\nionic platforms add android\n```\n#### 运行\n\n1. 浏览器\n\n\t```\n\tionic serve\n\t```\n\t会自动打开默认的浏览器\n\t<div width=\"50%\">\n\t<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/githubionic_serve.png\" style=\"width:30%\">\n\t</img>\n\t</div>\n\n2. 真机/模拟器\n\n\t首先，安装真机调试\n\t\n\t```\n\tnpm install -g ios-deploy\n\t```\n\t编译\n\t\n\t```\n\tionic build ios\n\t```\n\t运行\n\t\n\t```\n\tionic run --emulate ios\n\t```\n\t\n#### 调试\n\n- IOS\n\n\t手机 设置->Safari->高级->web检查器 \n\t电脑 Safari 浏览器，开发->你的手机\n- Android\n\n\t打开Chrome,输入：chrome://inspect/#devices（首次需翻墙）\n\n\n<br>\n\n----------------------\n<br>\n\n### 工程示例\n\n工程地址：[myApp](https://github.com/SandLZ/myApp.git)\n\n#### 基础概念\n\n- 路由\n\t控制页面跳转\n- 指令\n\t自定义组件等\n#### 目录结构\n\n结构：\n<div width=\"50%\">\n\t<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/githubmyApp_project.png\"\n\tstyle=\"width:30%\" align=\"right\">\n\t</img>\n</div>\n\n- hooks           \n\t编译cordova时自定义的脚本命令，方便整合到我们的编译系统和版本控制系统中\n- platforms\n\t- ios\n\t- android\n- plugins         \n\tcordova插件的目录\n- scss            \n\tscss文件，发布时编译这个目录下的文件输出到www的css目录中\n- www             \n\t样式、图片、脚本、资源库、页面、配置\n\t- css\n\t- img\n\t- js\n\t- lib\n\t- templates \n\t- index.html\n- bower.json      \n\tbower配置文件\n- config.xml      \n\tIonic的配置文件 可以配置app的id，名称、描述起始页和一起其他配置\n- gulpfile.js     \n\tgulp构建工具的执行文件，在这个文件中创建任务实现编译scss，css、js优化等\n- ionic.project   \n\tIonic的项目文件可以配置Ionic命令中livereload的监控文件\n- package.json    \n\tnpm配置文件\n\n#### 示例：top250电影\n\n获取豆瓣Top250电影并展示.\n\n如下图：\n<div width=\"50%\">\n\t<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/githubmovie_list.png\"\n\tstyle=\"width:25%\" align=\"middle\">\n\t</img>\n\t<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/githubmovie_detail.png\"\n\tstyle=\"width:25%\" align=\"middle\">\n\t</img>\n</div>\n\n\n\n##### 模块\n\n按模块划分，每个模块拥有独立的Controller、Service、View\n</br>\n\n<div width=\"50%\">\n\t<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/githubmovie_module.png\"\n\tstyle=\"width:48%\" align=\"right\">\n\t</img>\n</div>\n\n- Service\n\n\tmovie_service.js\n- Controller\n\n\tmovie_ctrl.js\n\t\n\tmovie_detail_ctrl.js\n- View\n\n\ttemplates/movieList.html\n\t\n\ttemplates/movieDetail.html\n\nmovie_service 请求数据；\n\nmovie_ctrl/movie_detail_ctrl 处理数据及业务逻辑；\n\nmovieList.html/movieDetail.html 展示数据\n\n##### 知识点\n\n1. 数据绑定\n\n\n\t$scope 的使用贯穿整个 App 应用,它与数据模型相关联,同时也是表达式执行的上下文.有了 $scope 就在视图和控制器之间建立了一个通道,基于作用域视图在修改数据时会立刻更新 $scope,同样的 $scope 发生改变时也会立刻重新渲染视图.\n\t\n\thtml通过{{movie.title}}方式绑定控制器里的变量.\n\t\n2. 依赖注入\n\n\tangular.module(name,requires,configFn)\n\t\n\tname：字符串类型，代表模块的名称；\n\n\trequires：字符串的数组，代表该模块依赖的其他模块列表，如果不依赖其他模块，用空数组即可；\n\n\tconfigFn：用来对该模块进行一些配置。\n\t\n\t3要素：服务的注册、依赖关系的声明、对象的获取\n\t\n\t首先，看一下module的定义：\n\t\n\t```\n\tThe angular.module() is a global place for creating, registering \n\tand retrieving Angular modules.When passed two or more arguments, \n\ta new module is created. If passed only one argument, an existing\n\tmodule (the name passed as the first argument to module) is \n\tretrieved。\n\t\n\t```\n\t创建：\n\t\n\t\tangular.module(\"myApp\", []);\n\t\t\n\t\t传递参数不止一个,代表新建模块;空数组代表该模块不依赖其他模块\n\t获取\n\t\n\t\tangular.module(\"myApp.service\");\n\t\t只有一个参数(模块名),代表获取模块\n\t\t如果模块不存在,angular框架会抛异常\n\t\t\n##### 实现\n\n###### 模块\n\napp.js\n\n```\nangular.module('myApp', [\n  'ionic',\n  'myApp.controllers'\n])\n\nangular.module('myApp.controllers', ['myApp.services']);\nangular.module('myApp.services', []);\n```\n注册myApp模块，依赖于[ 'ionic','myApp.controllers']\n注册controllers、services\n由于controller一般都依赖于services层，所以注册的时候直接依赖.\n\nService\n\n```\nangular.module('myApp.services')\n  .factory('Movie',['authHttp','$q', function (authHttp,$q) {\n    return{\n      getMovieByPage: function (current, count) {\n        var params={start:current, count:count};\n        var deferred=$q.defer();\n        authHttp.post(\n          'https://api.douban.com/v2/movie/top250',\n          JSON.stringify(params))\n          .success(function (data,status,headers,config) {\n            if(data!=null && data!=undefined){\n              if(data.result &&data.result.errorCode==0){\n                deferred.resolve(data.result.content.data);\n                return;\n              }\n            }\n            deferred.resolve(data);\n          })\n          .error(function (data,status,headers,config) {\n            console.log(data);\n            deferred.reject(data);\n          });\n        return deferred.promise;\n      }\n    };\n  }]);\n```\n注：factory\n\nfactory()让我们通过返回一个包含service方法和数据的对象来定义一个service。在service方法里面我们可以注入services，比如 $authHttp 和 $q等。\n\n在控制器层需使用时，只需简单的注入即可.\n\nController\n\n```\nangular.module('myApp.controllers')\n  .controller('MovieCtrl', function($scope, $ionicHistory, Movie, $location) {\n  });\n  \n```\n\n## 插件\n\n当业务比较复杂或ionicFramework已经不能满足我们的开发需求时，我们就需要对专门的移动平台编写插件.\n\n插件部分参照我的插件工程，有详细的使用说明.\n\n插件地址：[myFirstPlugin](https://github.com/SandLZ/myFirstPlugin.git)\n\n\n\n\n","tags":["Hybrid App"],"categories":["IT"]},{"title":"AngularJs-Chart的使用","url":"/2016/07/17/AngularJs-Chart/","content":"最近相关项目需要用到图表，看了不少图表相关的东西，觉得Chart.js不错，能满足项目中的需求，特此记录一下~\n\nAngularJs-Chart是对Chart.js的封装，方便在Ionic+Cordova这样的webapp中使用.\n由于测试工程是在Ionic+Cordova环境下运行的，所以啰嗦2句这个框架.\n\n## Ionic + Cordova 框架\n### 简介\n{% blockquote %}\nIonic 可以说是一个样式库，用来搭建我们的页面，针对移动应用做了很多优化，适合移动开发.\nCordova 提供了JS对访问移动平台Api的支持，支持调用手机的硬件，如摄像头、GPS等.\n{% endblockquote %}\n\n- 优势\n\t- 跨平台（一个WebView）\n\t- 开发迅速、节省开发成本\n\t- Web开发人员也可开发移动应用\n- 劣势\n\t- 性能较原生APP有差距\n\t\n<!-- more -->\n### 开发相关\n环境搭建:可参照辉哥大神写的[安装教程](http://devlu.me/2015/10/10/Mac%E4%B8%8BCordova-Ionic-AngularJs%E5%81%9A%E6%B7%B7%E5%90%88%E7%A7%BB%E5%8A%A8App%E5%BC%80%E5%8F%91%E4%B9%8B--%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/);\n\n入门:可参照[官方文档](http://cordova.apache.org/docs/en/latest/guide/overview/)或网络资料学习.\n\n\n## 新建测试工程\n关于新建一个工程可参照此[文章](http://jingyan.baidu.com/article/ff42efa93185c0c19e2202b1.html)\n\n这里我们选择一个简单的列表模板：sidemenu\n使用IntelliJ IDEA打开工程，如下图所示：\n\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/engine.png\" width = \"430\" height = \"230\" alt=\"图片名称\" align=center />\n</div>\n\n### 引入必要文件\n\n打开index.html,在引入app.js的地方引入chart必须的文件\n{% codeblock lang:js %}\n<!-- chart support -->\n<link rel=\"stylesheet\" href=\"lib/chart/angular-chart.css\">\n<script src=\"lib/chart/Chart.js\"></script>\n<script src=\"lib/chart/angular-chart.js\"></script>\n{% endcodeblock %}\n\n### 新建文件\n{% blockquote %}\n\t由于Chart.js配置项较多，放置在Controller中代码过去臃肿，导致逻辑代码看起来较为混乱，so新建一个Service-用于处理chart的一些配置.\n{% endblockquote %}\n\n- 控制器(Controller)\n\t- chartController\n- 服务(Service)\n\t- ChartService\n\t\n## 工程地址\n[chartDemo](https://github.com/SandLZ/chartDemo)\n","tags":["Chart"],"categories":["IT"]},{"title":"Linux常用命令","url":"/2016/07/01/Linux常用命令/","content":"## 文件操作\n### 新建\n- touch a.txt\n### 删除\n- rm a.txt\n### 复制\n- cp a.txt /tmp/\n### 移动\n- mv a.txt /home \n### 查找\n<!-- more -->\n{% blockquote %}\nfind [路径] [参数]\n参数说明：\n1. 时间：\n   -atimen    :在 n*24小时内被 access 即存取过的文件列出来！\n   -ctimen    :在 n*24小时内被 changed 即改变、新增的文件或目录印出\n   -mtimen    :在 n*24小时内被 modified 即修改过的文件印出\n  -newer file :比 file 还要新的文件就列出来！\n使用名称：\n   -gidn     :寻找 群组 ID 为 n 的文件\n   -group name :寻找群组名称为 name的文件\n   -uidn     :寻找拥有者 ID 为 n 的文件\n   -user name :寻找使用者名称为 name 的文件\n   -name file :寻找档名为 file 的文件名称（可以使用万用字符）\n   -type type :寻找档案属性为 type 的档案，type 包含了 b, c, d, p, l, s，这些与前一章的属性相同！例如 l 为 Link而 d 为路径之意！\n{% endblockquote %}\n```\n[root@bestlinux ~]# find / -nametesting           //查找名为 testing  的文件\n[root@bestlinux ~]# find / -name'test*'         //查找以test开头的文件\n[root@bestlinux ~]# find . -ctime1                //查找当前目录下一天内新增的文件\n[root@bestlinux ~]# find /home -usertest      //查找 /home下拥有者为 test 的文件\n```\n### 查看文件内容\n- cat /etc/services\n","tags":["命令"]},{"title":"香蕉派折腾记","url":"/2016/01/12/香蕉派折腾记/","content":"\n[香蕉派](http://www.xiangjiaopro.com/)(BananaPi)是类似于树莓派一样的卡片式微型计算机，可用于硬件控制、软件部署、多媒体播放等等用途.\n\n到手bananapi pro也有一段时间了，最近正好有空，记录一下我走过的坑...\n\n- 安装准备\n- 开始安装\n- 连接网络\n- 花生壳\n- 迅雷离线\n- 共享\n- 开发环境\n- 运行状态\n\n## 安装准备\n进入官网[下载](http://www.xiangjiaopro.com/Helps/jxwjpro.html)页面,有13个系统供我们选择，如下图所示：\n<!-- more -->\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/pi_download_index.png\" width = \"350\" height = \"303\" alt=\"图片名称\" align=center />\n</div>\n\n目前我试过2个系统：Android、Raspbian\n有开发需求的建议安装Raspbian\n\n- Android \n\t{% blockquote %}\n\t版本:4.4，是一个Android pad版本，分辨率经过测试支持1080P(默认)\n\t支持wifi连接(稳定性欠佳)\n\t此系统最大好处就是可以像使用手机一样安装App,比如我安装了全聚合App(非广告)，通过HDMI连接到显示器，像其他盒子一样可以看网络电视、视屏等.\n\t{% endblockquote %}\n\t\n- Raspbian\n\t{% blockquote %}\n\t基于Debian修改而来的Linux系统\n\t{% endblockquote %}\n\t\n\n## 开始安装\n\n### 安装系统\n官方提供了详细的安装操作系统的说明，点我[查看](http://www.xiangjiaopro.com/Helps/quickguide.html)\n\n## 连接网络\n\n准备\n{% blockquote %}\n- 有显示器\n\t打开控制台，输入ifconfig查看网络状况\n\t查看eth0 与 wlan0信息\n- 无显示器\n\t计算机一台，通过远程的方式连接到香蕉派\n\t如：ssh bananapi@192.168.1.8\n{% endblockquote %}\n### 网线\n通过网线方式连接的话，控制台ifconfig,eth0信息中是否有ip地址（没有的话检查网线连接、路由器地址过滤或地址绑定是否限制）\n### Wifi\n如网线类似，查看wlan0信息（无waln0 ? 别急...这是一个坑,下面将具体介绍）\n\n### 配置网络\n\n#### 大坑记录\n香蕉派默认没有开启wifi模块，需要手动开启...\n\n开启方式([官方文档](http://wiki.lemaker.org/BananaPro/Pi:WiFi_configuration))：\n{% blockquote %}\n- 加载wifi驱动\n\tsudo modprobe ap6210\n- 查看所有驱动加载情况\n\tlsmod\n\t\nsudo modprobe ap6210 只是一次性的，重启后wifi并不会加载，所以我们要让他开机就加载wifi：\n- 编辑模块配置文件\n\tsudo nano /etc/modules\n- 在底部添加一行\n\tap6210\n- 保存并退出\n\n{% endblockquote %}\n\n#### 修改网络配置文件 \n通过编辑配置文件的方式，选择Dhcp或Static ip\n网络配置文件地址：/etc/network/interfaces\n1. 控制台执行：sudo nano /etc/network/interfaces\n2. 修改配置(静态ip方式，方便远程连接)\n\t```\n\t# eth0-有线\n\tauto lo\n\tiface lo inet loopback\n\tiface eth0 inet static\n\taddress 192.168.0.13\n\tnetmask 255.255.255.0\n\tgateway 192.168.0.1\n\t# wlan0-无线\n\t#auto wlan0\n\t#allow-hotplug wlan0\n\t#iface wlan0 inet static\n\t#pre-up wpa_supplicant -B w -D wext -i wlan0 -c/etc/\twpa.conf\n\t#post-down killall -q wpa_supplicant\n\t#address 192.168.0.12\n\t#netmask 255.255.255.0\n\t#gateway 192.168.0.1\n\n\tiface default inet dhcp\n\t```\n\t这里我没有使用wifi,注释了wifi配置，采用eth0\n\t\n## 花生壳\n花生壳是一个针对嵌入式设备而开发的控制软件，可以花生壳后台配置访问内网的设备，包括端口映射配置.\n\n### 安装\n- 下载[安装包](http://hsk.oray.com/download/#type=http|shumeipai)\n- 文件拷贝\n通过u盘，或者ftp的方式将文件放置到香蕉派，解压缩\n进入phddns2文件夹 cd phddns2\n执行 ./oraynewph start\n- 查看状态\noraynewph status\n查看控制台信息，即可看到SN码，以及运行状态.\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/oray_status.png\" width = \"598\" height = \"140\" alt=\"图片名称\" align=center />\n</div>\n### 配置\n- 登录[花生壳后台管理](b.oray.com)\n\t输入SN码，首次密码：admin\n\t完成手机邮箱验证\n- 绑定\n\t香蕉派需要绑定花生壳账号才能使用，所以还得注册一个花生壳账号以绑定香蕉派（如需使用内网穿透，须购买内网穿透）\n- 配置\n绑定后，新增、修改内网映射，即可通过你的花生壳域名来访问你的香蕉派服务\n<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/net.jpeg\" width = \"600\" height = \"290\" alt=\"图片名称\" align=center />\n</div>\n\n## 迅雷离线\n为香蕉派增加离线下载功能\n\n### 安装迅雷离线固件\n- 下载\n\t下载地址：http://pan.baidu.com/s/1kTCBZbL 提取码：qiq9\n- 上传\n\t拷贝安装文件到香蕉派中，如~/home/bananapi/xunlei\n- 解压缩\n\tunzip xxxx.zip\n- 权限\n\tchmod 0777 * -R\n- 运行\n\t./portal\n\t获取到你的设备码\n- 重启\n\t./portal -s\n\t./portal\n- 迅雷远程\n\thttp://yuancheng.xunlei.com/\t\n\t输入之前的机器码\n\t<div  align=\"center\">    \n<img src=\"http://7xsap2.com1.z0.glb.clouddn.com/%E8%BF%85%E9%9B%B7.png\" width = \"550\" height = \"270\" alt=\"图片名称\" align=center />\n</div>\n此时是无法下载的（没有挂在硬盘）\n\n### 挂载硬盘\n\n{% blockquote %}\n迅雷是检测挂载的磁盘来作为下载的目录。所以要保证几个事情，一是迅雷要具有写入权限； 二是必须要有挂载的磁盘，而且这个磁盘必须不是挂载到根目录的\n{% endblockquote %}\n\n## 共享\n### Samba\n\n{% blockquote %}\nSamba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。\n{% endblockquote %}\n\n- 安装samba包\n\nsudo apt-get install samba samba-common-bin\nsudo apt-get install netatalk （可选，用于支持AFP）\nsudo apt-get install avahi-daemon（可选，用于支持网内的计算机自动发现）\n\n- 配置\n\n/etc/samba/smb.conf \n\n```\n[public]\ncomment = Public Storage\npath = /home/pi\nread only = no#任何人都具有了访问修改的权限\n#因为是公共文件夹，所以给了所有用户全部权限，可以自定义\ncreate mask = 0777#新创建文件的默认属性\ndirectory mask = 0777#新创建文件夹的默认属性\nguest ok = yes#默认的访问用户名为guest\nbrowseable = yes\n```\n- 用户\n\n```\ncat /etc/passwd | mksmbpasswd.sh >/etc/samba/smbpasswd\nsmbpasswd -a 用户名 添加用户\nsmbpasswd -e 用户名 激活用户\n```\n### DLNA\n\n{% blockquote %}\nDLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。所以，其选择的各种技术和协议都是当前所应用很广泛的技术和协议。\nDLNA将其整个应用规定成5个功能组件。从下到上依次为：网络互连，网络协议，媒体传输，设备的发现控制和管理，媒体格式。\n{% endblockquote %}\n\n- 安装\n\t\tsudo apt-get install minidlna\n- 配置\n\t\t/etc/minidlna.conf\n\t\t\n```\n#A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件\nmedia_dir=A,/samba/DLNA/Music\nmedia_dir=P,/samba/DLNA/Picture\nmedia_dir=V,/samba/DLNA/Video\n#配置minidlna的数库数据的存放目录\ndb_dir=/samba/DLNA/db\n#配置日志目录\nlog_dir=/samba/DLNA/log\n```\n确保目录存在且设置权限为可读写\n\n- 其他\n\t- 重启 minidlna\n\t\t/etc/init.d/minidlna restart\n\t-  minidlna 随机启动\n\t\tsudo update-rc.d minidlna defaults\n\t- 停止 minidlna 服务\n\t\tsudo service minidlna stop\n\t- 取消 minidlna 的开机自动启动\n\t\tsudo update-rc.d -f minidlna remove\n\t\t\n- minidlna支持rm、rmvb\n\t参考:[编译minidlna](http://blog.csdn.net/haven200/article/details/43039261)\n\n### FTP\n\n- 安装\n\tapt-get install vsftpd\n- 配置\n\t/etc/vsftpd.conf\n\t- 配置用户可以写权限：write_enable=YES\n\t- 配置uMask：local_umask=022（默认为077，该种方式不支持断点续传，修改为022）\n\t- 禁止匿名用户登录：anonymous_enable=NO\n\t- 限制用户访问配置以外的路径：chroot_local_user=YES（这个配置是限制全部用户的，也可以限制部分用户）\n\t- 配置用户的Home目录：local_root=/application/search/test\n- 重启\n\tservice vsftpd restart\n\n## 开发环境\n\n## 运行状态\n获取香蕉派的cpu、内存等使用情况\n- 建立脚本 \n\tnano get.py\n\n```\nimport os\n \n# Return CPU temperature as a character string                                     \ndef getCPUtemperature():\n    res = os.popen('vcgencmd measure_temp').readline()\n    return(res.replace(\"temp=\",\"\").replace(\"'C\\n\",\"\"))\n \n# Return RAM information (unit=kb) in a list                                      \n# Index 0: total RAM                                                              \n# Index 1: used RAM                                                                \n# Index 2: free RAM                                                                \ndef getRAMinfo():\n    p = os.popen('free')\n    i = 0\n    while 1:\n        i = i + 1\n        line = p.readline()\n        if i==2:\n            return(line.split()[1:4])\n \n# Return % of CPU used by user as a character string                               \ndef getCPUuse():\n    return(str(os.popen(\"top -n1 | awk '/Cpu\\(s\\):/ {print $2}'\").readline().strip()))\n \n# Return information about disk space as a list (unit included)                    \n# Index 0: total disk space                                                        \n# Index 1: used disk space                                                        \n# Index 2: remaining disk space                                                    \n# Index 3: percentage of disk used                                                 \ndef getDiskSpace():\n    p = os.popen(\"df -h /\")\n    i = 0\n    while 1:\n        i = i +1\n        line = p.readline()\n        if i==2:\n            return(line.split()[1:5])\n \n \n# CPU informatiom\nCPU_temp = getCPUtemperature()\nCPU_usage = getCPUuse()\n \n# RAM information\n# Output is in kb, here I convert it in Mb for readability\nRAM_stats = getRAMinfo()\nRAM_total = round(int(RAM_stats[0]) / 1000,1)\nRAM_used = round(int(RAM_stats[1]) / 1000,1)\nRAM_free = round(int(RAM_stats[2]) / 1000,1)\n \n# Disk information\nDISK_stats = getDiskSpace()\nDISK_total = DISK_stats[0]\nDISK_used = DISK_stats[1]\nDISK_perc = DISK_stats[3]\n \nif __name__ == '__main__':\n    print('')\n    print('CPU Temperature = '+CPU_temp)\n    print('CPU Use = '+CPU_usage)\n    print('')\n    print('RAM Total = '+str(RAM_total)+' MB')\n    print('RAM Used = '+str(RAM_used)+' MB')\n    print('RAM Free = '+str(RAM_free)+' MB')\n    print('') \n    print('DISK Total Space = '+str(DISK_total)+'B')\n    print('DISK Used Space = '+str(DISK_used)+'B')\n    print('DISK Used Percentage = '+str(DISK_perc))\n```\n- 执行脚本\n\tpython get.py\n\t\n\t\n\t\n参考：\n1. [FTP](http://jianfeihit.iteye.com/blog/1820413)\n2. [SAMBA](http://shumeipai.nxez.com/2013/08/24/install-nas-on-raspberrypi.html)\n3. [MINIDLNA](http://shumeipai.nxez.com/2015/07/12/raspberry-pi-install-dlna-streaming-media-server.html?variant=zh-cn)\n\n\n","tags":["香蕉派"],"categories":["IT"]},{"title":"Ios-创建Framework","url":"/2015/11/30/ios-创建Framework/","content":"\n## 开发环境：\n\n 1. mac os x 10.11.1\n 2. xcode 7.1.1\n\n\n----------\n\n\n## 简述：\n\n - 在实际开发过程中，我们经常会封装一些组件。那么，如何提高开发效率，不必每次都引入大量的文件呢？答案显然易见，那就是打成framework或者.a包.\n - 本篇将详细介绍如何将封装后的代码制作成framework.\n\n### framework是啥？\n\n - framework是一系列资源的集合，Xcode可以方便的将这些文件编译到你的项目中去\n\n<!-- more -->\n\n\n## 开始建立Framework\n### 创建一个Framework\n<div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130184513678\" width = \"430\" height = \"300\" alt=\"图片名称\" align=center />\n</div>\n \n### 建立一个简单的类，用于打印信息\n \n\n```\n#import <Foundation/Foundation.h>\n@interface SayHello : NSObject\n- (void)sayHello;\n@end\n```\n\n```\n#import \"SayHello.h\"\n\n@implementation SayHello\n- (void)sayHello{\n    NSLog(@\"Hello,Framework.\");\n}\n@end\n```\n\n\n### 暴露头文件（你想让别人看到的）\n\n 选中工程->Build Phases->Headers,将头文件拖拽至Public中\n <div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130190739092\" width = \"300\" height = \"200\" alt=\"图片名称\" align=center />\n</div>\n\n### 多平台Framework支持\n\t\n1.新建一个Aggregate(集合)\n\t\t New->Target->Aggregate\n<div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130191243618\" width = \"300\" height = \"200\" alt=\"图片名称\" align=center />\n</div>\n\t\t\n2.新建一个脚本\n<div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130191445925\" width = \"400\" height = \"160\" alt=\"图片名称\" align=center />\n</div>\n\t\n3.在脚本中键入如下代码\n\t\n\n```\n# Sets the target folders and the final framework product.\n# 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME\n# 例如: FMK_NAME = \"MyFramework\"\nFMK_NAME=${PROJECT_NAME}\n# Install dir will be the final output to the framework.\n# The following line create it in the root folder of the current project.\nINSTALL_DIR=${SRCROOT}/Products/${FMK_NAME}.framework\n# Working dir will be deleted after the framework creation.\nWRK_DIR=build\nDEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.framework\nSIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework\n# -configuration ${CONFIGURATION}\n# Clean and Building both architectures.\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphoneos clean build\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphonesimulator clean build\n# Cleaning the oldest.\nif [ -d \"${INSTALL_DIR}\" ]\nthen\nrm -rf \"${INSTALL_DIR}\"\nfi\nmkdir -p \"${INSTALL_DIR}\"\ncp -R \"${DEVICE_DIR}/\" \"${INSTALL_DIR}/\"\n# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.\nlipo -create \"${DEVICE_DIR}/${FMK_NAME}\" \"${SIMULATOR_DIR}/${FMK_NAME}\" -output \"${INSTALL_DIR}/${FMK_NAME}\"\nrm -r \"${WRK_DIR}\"\nopen \"${INSTALL_DIR}\"\n```\n此段脚本将为我们合并多平台的framework，用于支持模拟器与真机.\n\n注：\n\n```\ni386: 32位模拟器\nx86_64: 64为模拟器\narm7: 在最老的支持iOS7的设备\narm7s: 在iPhone5和5C上使用\narm64: 运行于iPhone5S的64位ARM处理器\n```\n\n### 生成\n选中Aggregate,Command + B编译工程\n \n <div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130192041319\" width = \"400\" height = \"200\" alt=\"图片名称\" align=center />\n</div>\n\n编译完成后，会自动打开编译完成的文件夹，Framework就在那里.\n <div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130192308943\" width = \"400\" height = \"200\" alt=\"图片名称\" align=center />\n</div>\n\n快捷键：Command + 上（回到上级目录）\n\n终于看到Framework啦~\n\n### 检测多平台支持\n\n进入Framework目录：cd framework目录\n\t \n\n```\nlipo -info /目录/FrameworkTest.framework/FrameworkTest\n```\n结果\n```\nArchitectures in the fat file: FrameworkTest.framework/FrameworkTest are: i386 x86_64 armv7 arm64 \n```\n\n竟然不支持armv7s，别急，有办法！\n\n选中工程->BuildSetting 添加一条\n <div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130193329635\" width = \"300\" height = \"200\" alt=\"图片名称\" align=center />\n</div>\n\n <div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130193232641\" width = \"330\" height = \"170\" alt=\"图片名称\" align=center />\n</div>\n\n再次编译，检查，Bingo~\n\n\n------\n\n## 整合到项目中\n\n第一步\n\n - \b将生成的framework Add到你的项目中去\n - 检查framework是否添加到项目中（Build Phases-Link Binary）\n\n第二步\n\n - 在工程中引入头文件\n\n `#import <FrameworkTest/SayHello.h>`\n\n第三步\n\n - 使用你的framework,测试打印信息\n \n  `SayHello *hello = [[SayHello alloc] init];\n    [hello sayHello];`\n\n控制台打印结果：\n\n```\n2015-11-30 19:04:15.819 TeamTest03[14443:330569] Hello,Framework.\n```\n\n大功告成~\n\n注：可能遇到的问题\n\n 1. 运行时报错：image not found\n\t问题描述：找不到framework,framework没有拷贝到app中\n\t 解决：选中工程->Build Phases->加号->New Copy File Phase\n\t  <div  align=\"center\">    \n<img src=\"http://img.blog.csdn.net/20151130194553221\" width = \"350\" height = \"150\" alt=\"图片名称\" align=center />\n</div>\n\t ","tags":["framework"],"categories":["IT"]},{"title":"Hexo常用命令","url":"/2015/10/03/Hexo常用命令/","content":"\n\n正式开始使用Hexo + Github来写博客啦，这两天终于大概配置好页面了，还差一些优化，比如百度抓取...\n\n下面记录一些常用的命令\n## 命令\n\n### 新建\n\n{% blockquote %}\n\t新建文章：layout默认post，文件地址(yourblog/source/_post)\n\t新建页面：文件地址(yourblog/source/pagename)\n{% endblockquote %}\n<!-- more -->\n\n```\n新建文章:  hexo new [layout] <title>\n新建页面:  hexo new page <pagename>\n```\n### 生成与发布\n{% blockquote %}\n\t生成：生成静态页面html到public目录\n\t发布：.deploy到Github\n\t发布前须确认_cinfig_yml中配置了deploy的地址.\n{% endblockquote %}\n\n```\nhexo generate // 生成\nhexo deploy  // 发布\n----\nhexo generate --watch // 文件变化状况\n// 生成后发布\nhexo generate --deploy\nhexo deploy --generate\n\n```\n### 命令简写\n提高效率，啦啦啦...\n```\nhexo n // hexo new\nhexo g // hexo generate\nhexo s // hexo server\nhexo d // hexo deploy\nhexo g -d // hexo generate & deploy\n```\n\n\n\n\n","tags":["Hexo"],"categories":["IT"]}]